local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Lighting = game:GetService("Lighting")
local VirtualUser = game:GetService("VirtualUser")
local RunService = game:GetService("RunService")
local PathfindingService = game:GetService("PathfindingService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local ProximityPromptService = game:GetService("ProximityPromptService")
local UserInputService = game:GetService("UserInputService")
local Workspace = game:GetService("Workspace")
local SoundService = game:GetService("SoundService")
local Debris = game:GetService("Debris")

local notifysound = 4590657391

local PlayingSound = true
local promptReachMultiplier = 2.0

function Sound()

local sound = Instance.new("Sound",SoundService)

sound.Volume = 2.5

sound.SoundId = "rbxassetid://" .. notifysound 

sound.Playing = PlayingSound and true or false

Debris:AddItem(sound,2)

end
Sound()

function WaitForChildOfClass(Parent , Part)

local Clas = Parent:FindFirstChildOfClass(Part)
while Clas == nil do
task.wait()
Clas = Parent.DescendantAdded:Wait()
if Clas:IsA(Part) then
return Clas
end
end
return Clas

end

if LocalPlayer:GetAttribute("StarringLoaded") then 
print("Starring准备加载")

return end

if game:GetService("ReplicatedStorage"):FindFirstChild("RemotesFolder") or game.ReplicatedStorage:FindFirstChild("EntityInfo") or game.ReplicatedStorage:FindFirstChild("Bricks") then

repeat task.wait() until workspace.CurrentRooms:FindFirstChildOfClass("Model")

local Disable1 = false
local Disable2 = false
local Disable3 = false
local Disable4 = false
local Disable5 = false
local FakeSurge
local alive 
local Pathnode 

local repo
if UIStyle == "LinoriaLib" then
repo = 'https://raw.githubusercontent.com/mstudio45/LinoriaLib/main/'
else
repo = 'https://raw.githubusercontent.com/mstudio45/Obsidian/main/'
end
local Executor = identifyexecutor() or getexecutorname() or "Unknown"
local Library = loadstring(game:HttpGet(repo..'Library.lua'))()

Library.ForceCheckbox = true

Library:Notify("正在加载Starring | Doors",5)

if Executor == "Xeno" or Executor == "xeno" then Library:Notify("Not Supported Executor",3) return end

local success, result = pcall(function()
return RequiredMainGame
end)
if not success then
Library:Notify("Require Is  Not Supported Some Features would be disabled",3)
Disable1 = true
print("false require")
end

print("true require")
 
if not isnetworkowner then
Library:Notify("isnetworkowner  not supported some features would be disabled",3)
Disable2 = true
print("false isnetworkowner")
end

print("true isnetworkowner")
local Prompt = Instance.new("ProximityPrompt",workspace)
Prompt.Name = "TestPrompt"

local success, result = pcall(function()
return fireproximityprompt(Prompt)
end)
if not success then
Prompt:Destroy()
Library:Notify("fireproximityprompt is not supported methods would change stillwork but less reliable some will not work will be disabled",4)
Disable3 = true
print("false fireproximityprompt")
end

print("true fireproximityprompt")
Prompt:Destroy()

if not replicatesignal then
Disable4 = true
Library:Notify("replicatesignal  not supported methods would change stillwork but less reliable",3)
print("false replicatesignal")
end
print("true replicatesignal")


if not hookmetamethod or not newcclosure then

Library:Notify("不支持hookmetamethod，一些功能将被禁用",3)

print("false hookmetamethod")


Disable5 = true


end


print("true hookmetamethod")



ThemeManager = loadstring(game:HttpGet(repo..'addons/ThemeManager.lua'))()
SaveManager  = loadstring(game:HttpGet(repo..'addons/SaveManager.lua'))()
Options = Library.Options
Toggles = Library.Toggles
local ESPLibrary = loadstring(game:HttpGet("https://raw.githubusercontent.com/mstudio45/MSESP/refs/heads/main/source.luau"))()

local ESPConfig = {
Tracer = {
Enabled = true,
Position = "Bottom"
},
TextSize = 16,
ShowDistance = true,
ShowTracers = false,
FillTransparency = 0.7,
OutlineTransparency = 0.4,
ESPType = "Highlight"
}

local ESPObjects = {}
local ESPEnabled = false

function ESPLibrary:AddESP(Part, Txt, Color)
if not Part or not Part.Parent then return end
    
local model = Part
if Part:IsA("BasePart") and Part.Parent and Part.Parent:IsA("Model") then
model = Part.Parent
end
    
if Part.Name == "Door" and Part.Parent and Part.Parent.Name == "Door" then
model = Part
end
    
if ESPObjects[model] then
ESPObjects[model]:Hide()
end
    
local espObject = ESPLibrary:Add({
Name = Txt,
Model = model,
Color = Color,
MaxDistance = 1000,
TextSize = ESPConfig.TextSize,
ESPType = ESPConfig.ESPType,
FillColor = Color,
OutlineColor = Color,
FillTransparency = ESPConfig.FillTransparency,
OutlineTransparency = ESPConfig.OutlineTransparency,
Tracer = { 
Enabled = ESPConfig.Tracer.Enabled,
Color = Color,
From = ESPConfig.Tracer.Position
}
})
    
ESPObjects[model] = espObject
espObject:Show()
end

function ESPLibrary:RemoveESP(Part)
local model = Part
if Part.Name == "Door" and Part.Parent and Part.Parent.Name == "Door" then
model = Part
elseif Part:IsA("BasePart") and Part.Parent and Part.Parent:IsA("Model") then
model = Part.Parent
end

if ESPObjects[model] then
ESPObjects[model]:Hide()
ESPObjects[model] = nil
end
end

function ESPLibrary:GenerateRandomString()
return game:GetService("HttpService"):GenerateGUID(false)
end

function ESPLibrary:Unload()
for model, espObject in pairs(ESPObjects) do
if espObject and typeof(espObject.Hide) == "function" then
espObject:Hide()
end
end
ESPObjects = {}
getgenv().ESPLibrary = nil
end

function UpdateAllESPConfig()
ESPLibrary.GlobalConfig.Distance = ESPConfig.ShowDistance
ESPLibrary.GlobalConfig.Tracers = ESPConfig.ShowTracers

for model, espObject in pairs(ESPObjects) do
if model and model.Parent and espObject and espObject.CurrentSettings then
espObject.CurrentSettings.TextSize = ESPConfig.TextSize
espObject.CurrentSettings.Tracer.Enabled = ESPConfig.Tracer.Enabled
espObject.CurrentSettings.Tracer.From = ESPConfig.Tracer.Position
espObject.CurrentSettings.FillTransparency = ESPConfig.FillTransparency
espObject.CurrentSettings.OutlineTransparency = ESPConfig.OutlineTransparency
espObject.CurrentSettings.ESPType = ESPConfig.ESPType

espObject:Hide()
espObject:Show()
end
end
end

function RecreateAllESP()
local espStates = {
Door = Toggles.Door and Toggles.Door.Value,
Key = Toggles.Key and Toggles.Key.Value,
HidingSpot = Toggles.HidingSpot and Toggles.HidingSpot.Value,
GateLever = Toggles.GateLever and Toggles.GateLever.Value,
Players = Toggles.Players and Toggles.Players.Value,
Books = Toggles.Books and Toggles.Books.Value,
Breaker = Toggles.Breaker and Toggles.Breaker.Value,
Items = Toggles.Items and Toggles.Items.Value,
Gold = Toggles.Gold and Toggles.Gold.Value,
EntitesESP = Toggles.EntitesESP and Toggles.EntitesESP.Value,
TimerLever = Toggles.TimerLever and Toggles.TimerLever.Value,
LeverESP = Toggles.LeverESP and Toggles.LeverESP.Value,
Generator = Toggles.Generator and Toggles.Generator.Value,
Ladder = Toggles.Ladder and Toggles.Ladder.Value,
Fuse = Toggles.Fuse and Toggles.Fuse.Value,
Anchor = Toggles.Anchor and Toggles.Anchor.Value,
WaterPump = Toggles.WaterPump and Toggles.WaterPump.Value
}
    
for model, espObject in pairs(ESPObjects) do
if espObject and typeof(espObject.Hide) == "function" then
espObject:Hide()
end
end
ESPObjects = {}

for espType, isEnabled in pairs(espStates) do
if isEnabled then
if Toggles[espType] then
Toggles[espType]:SetValue(false)
Toggles[espType]:SetValue(true)
end
end
end
end

function UpdateFillTransparency(value)
ESPConfig.FillTransparency = value
for _, espObject in pairs(ESPObjects) do
if espObject and espObject.CurrentSettings then
espObject.CurrentSettings.FillTransparency = value
espObject:Hide()
espObject:Show()
end
end
end

function UpdateOutlineTransparency(value)
ESPConfig.OutlineTransparency = value
for _, espObject in pairs(ESPObjects) do
if espObject and espObject.CurrentSettings then
espObject.CurrentSettings.OutlineTransparency = value
espObject:Hide()
espObject:Show()
end
end
end

function UpdateTextSize(value)
ESPConfig.TextSize = value
for _, espObject in pairs(ESPObjects) do
if espObject and espObject.CurrentSettings then
espObject.CurrentSettings.TextSize = value
espObject:Hide()
espObject:Show()
end
end
end


local function shouldShowESP(roomNumber)
local currentRoom = LocalPlayer:GetAttribute("CurrentRoom")
if not currentRoom then return false end
return roomNumber == currentRoom or roomNumber == currentRoom + 1
end


local raycastParms = RaycastParams.new()

function GetNearestCloset()

local closest = nil
local MaxDistance = math.huge
local assets = workspace.CurrentRooms[LocalPlayer:GetAttribute("CurrentRoom")]
if assets then
for _, v in ipairs(assets:FindFirstChild("Assets",true):GetChildren()) do

if v.Name == "Wardrobe" or v.Name == "Rooms_Locker" or v.Name == "Rooms_Locker_Fridge" or v.Name == "Toolshed" or v.Name == "Locker_Large" or v.Name == "Backdoor_Wardrobe" or v.Name == "Bed" or v.Name == "Double_Bed" then
if v.PrimaryPart then

local Distance = (LocalPlayer.Character.HumanoidRootPart.Position - v.PrimaryPart.Position).Magnitude
if Distance < MaxDistance then
closest = v
MaxDistance = Distance 
end
end
end
end
end
return closest
end


function GetNearestLocker()



local closest = nil
local MaxDistance = math.huge

for _, v in ipairs(workspace.CurrentRooms:GetDescendants()) do

if v.Name == "Rooms_Locker" or v.Name == "Rooms_Locker_Fridge" then
if v.PrimaryPart then

local Distance = (LocalPlayer.Character.HumanoidRootPart.Position - v.PrimaryPart.Position).Magnitude
if Distance < MaxDistance then
closest = v
MaxDistance = Distance 
end
end
end
end
return closest

end



function fireInteract(prompt)

if Disable3 == true then

prompt:InputHoldBegin()

prompt:InputHoldEnd(prompt.HoldDuration)

elseif Disable3 == false then

fireproximityprompt(prompt)

end



end



local Finish = nil

Finish = game:GetService("ProximityPromptService").PromptTriggered:Connect(function(v)
if Library.Unloaded == true then

Finish:Disconnect()
Finish = nil

end


if v.Name == "FakePrompt" then

if game.Players.LocalPlayer.Character:FindFirstChild("Lockpick") or game.Players.LocalPlayer.Character:FindFirstChild("SkeletonKey") then
local animator = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool"):WaitForChild("Animations",9e9).usefinish)
animator:Play()
elseif game.Players.LocalPlayer.Character:FindFirstChild("Shears") then
local animator = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool"):WaitForChild("Animations",9e9).promptanimend)
animator:Play()
game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool"):WaitForChild("Handle").sound_promptend:Play()
end


end

end)

local Hold = nil
Hold = game:GetService("ProximityPromptService").PromptButtonHoldBegan:Connect(function(v)
if Library.Unloaded == true then

Hold:Disconnect()
Hold = nil

end
if v.Name == "FakePrompt" then

if game.Players.LocalPlayer.Character:FindFirstChild("Lockpick") or game.Players.LocalPlayer.Character:FindFirstChild("SkeletonKey") then
local animator = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool"):WaitForChild("Animations").use)
animator:Play()
elseif game.Players.LocalPlayer.Character:FindFirstChild("Shears") then
local animator = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool"):WaitForChild("Animations",9e9).promptanim)
animator:Play()
game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool"):WaitForChild("Handle").sound_prompt:Play()
end


end

end)

LocalPlayer:SetAttribute("StarringLoaded",true)


Floor = ReplicatedStorage.GameData.Floor


RemoteFolder = ReplicatedStorage:FindFirstChild("EntityInfo") or ReplicatedStorage:FindFirstChild("RemotesFolder") or ReplicatedStorage:FindFirstChild("Bricks")
MainGame = LocalPlayer.PlayerGui.MainUI.Initiator.Main_Game
RequiredMainGame = require(LocalPlayer.PlayerGui.MainUI.Initiator.Main_Game)
RemoteListener = MainGame.RemoteListener
Modules = RemoteListener.Modules

ClientModules = game:GetService("ReplicatedStorage"):FindFirstChild("ModulesClient") or game:GetService("ReplicatedStorage"):FindFirstChild("ClientModules") 
if ReplicatedStorage:FindFirstChild("RemotesFolder") then 
Modifiers = ReplicatedStorage:WaitForChild("LiveModifiers")
end
local PlayerGui  = LocalPlayer.PlayerGui 
Fog = Lighting:FindFirstChild("Fog") or Lighting:FindFirstChild("CaveAtmosphere")
CollisionClone = nil
CollisionClone2 = nil

Pathnode = Instance.new("Folder",workspace)
Pathnode.Name = "Path Node"

local JumpConnection 
local CleanUp
local Character = nil

if LocalPlayer.Character then

raycastParms.FilterDescendantsInstances = {LocalPlayer.Character}
raycastParms.FilterType = Enum.RaycastFilterType.Blacklist

if LocalPlayer.PlayerGui.MainUI.MainFrame.MobileButtons:FindFirstChild("JumpButton") then


JumpConnection = LocalPlayer.PlayerGui.MainUI.MainFrame.MobileButtons.JumpButton.MouseButton1Click:Connect(function()
if Toggles and Toggles.InfiniteJump and Toggles.InfiniteJump.Value then
if Character then

Character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)

end
end

end)

end


Character = LocalPlayer.Character
if Character.Collision:FindFirstChild("CollisionCrouch") then
Character.Collision.CollisionCrouch.Size = Vector3.new(0.5, 0.001, 3)
end
if ReplicatedStorage:FindFirstChild("RemotesFolder") then
CollisionClone = Character.CollisionPart:Clone()
CollisionClone.Parent = Character
CollisionClone.Massless = true
CollisionClone.CanCollide = false
CollisionClone.Name = "_CollisionPart"
if CollisionClone:FindFirstChild("CollisionCrouch") then
CollisionClone.CollisionCrouch:Destroy()
end

CollisionClone2 = Character.CollisionPart:Clone()
CollisionClone2.Parent = Character
CollisionClone2.Massless = true
CollisionClone2.CanCollide = false
CollisionClone2.Name = "_CollisionPart2"
if CollisionClone2:FindFirstChild("CollisionCrouch") then
CollisionClone2.CollisionCrouch:Destroy()
end
end
end


local NewCharacter = LocalPlayer.CharacterAdded:Connect(function()
task.wait(1.5)
if CrouchConnection then
CrouchConnection:Disconnect()
CrouchConnection = nil
end
if JumpConnection then
JumpConnection:Disconnect()
JumpConnection = nil
end


raycastParms.FilterDescendantsInstances = {LocalPlayer.Character}
raycastParms.FilterType = Enum.RaycastFilterType.Blacklist



if LocalPlayer.PlayerGui.MainUI.MainFrame.MobileButtons:FindFirstChild("JumpButton") then


JumpConnection = LocalPlayer.PlayerGui.MainUI.MainFrame.MobileButtons.JumpButton.MouseButton1Click:Connect(function()
if Toggles.InfiniteJump.Value then
if Character then

Character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)

end
end

end)

end



MainGame = LocalPlayer.PlayerGui.MainUI.Initiator.Main_Game
RequiredMainGame = require(LocalPlayer.PlayerGui.MainUI.Initiator.Main_Game)
RemoteListener = MainGame.RemoteListener
Modules = RemoteListener.Modules

Character = LocalPlayer.Character

if Character.Collision:FindFirstChild("CollisionCrouch") then
Character.Collision.CollisionCrouch.Size = Vector3.new(0.5, 0.001, 3)
end

if ReplicatedStorage:FindFirstChild("RemotesFolder") then
CollisionClone = Character.CollisionPart:Clone()
CollisionClone.Parent = Character
CollisionClone.Massless = true
CollisionClone.CanCollide = false
CollisionClone.Name = "_CollisionPart"
CollisionClone2 = Character.CollisionPart:Clone()
CollisionClone2.Parent = Character
CollisionClone2.Massless = true
CollisionClone2.CanCollide = false
CollisionClone2.Name = "_CollisionPart2"
if CollisionClone2:FindFirstChild("CollisionCrouch") then
CollisionClone2.CollisionCrouch:Destroy()
end
end

end)
local LatestRoom = ReplicatedStorage.GameData.LatestRoom.Value

local Connections = {}


Window = Library:CreateWindow({
Title = '💠 Starring V3',
Footer = "感觉我自己好帅",
Center = true,
AutoShow = true
})

if UIStyle == "LinoriaLib" then
Tabs = {
Player = Window:AddTab("玩家"),
Exploits = Window:AddTab("漏洞"),
Visuals = Window:AddTab("视觉"),
Floor = Window:AddTab("楼层"),
UISettings = Window:AddTab("配置"),
Info = Window:AddTab("信息"),
Addons = Window:AddTab("插件"),
}
else
Tabs = {
Player = Window:AddTab({
Name = "玩家",
Description = "基础功能", 
Icon = "user"
}),
Exploits = Window:AddTab({
Name = "漏洞",
Description = "利用Doors游戏漏洞", 
Icon = "bug"
}),
Visuals = Window:AddTab({
Name = "视觉",
Description = "渲染&ESP", 
Icon = "scan-eye"
}),
Floor = Window:AddTab({
Name = "楼层",
Description = "基于楼层", 
Icon = "sparkles"
}),
UISettings = Window:AddTab({
Name = "配置",
Description = "用户界面&预设", 
Icon = "settings"
}),
Info = Window:AddTab({
Name = "信息",
Description = "关于Starring的信息", 
Icon = "info"
}),
Addons = Window:AddTab({
Name = "插件",
Description = "Starring的社区插件", 
Icon = "boxes"
})
}
end


local Movement = Tabs.Player:AddLeftGroupbox("移动")

local MiscBox = Tabs.Player:AddLeftGroupbox("杂项")

local TabBox3 = Tabs.Exploits:AddLeftTabbox() 

local Anti = TabBox3:AddTab("实体")
local Bypass = TabBox3:AddTab("绕过")


Automation = Tabs.Player:AddRightGroupbox('自动化')
InfiniteBox = Tabs.Exploits:AddRightGroupbox('无限物品')

local ReachBox = Tabs.Player:AddRightGroupbox('距离')


FloorAnti = Tabs.Floor:AddLeftGroupbox('楼层绕过')


ModifiersBox = Tabs.Floor:AddLeftGroupbox('修饰符')


FloorESP = Tabs.Floor:AddRightGroupbox('ESP')

local TabBox4 = Tabs.Visuals:AddRightTabbox()

local NotifyBox = TabBox4:AddTab('通知')
local NySet = TabBox4:AddTab('设置')

local Camera = Tabs.Visuals:AddRightGroupbox('相机')

local TabBox = Tabs.Visuals:AddLeftTabbox() 

ESP = TabBox:AddTab('ESP')
SettingsESP = TabBox:AddTab('设置')
ClosetTran = Tabs.Visuals:AddLeftGroupbox('透明度')

SettingsBox = Tabs.UISettings:AddRightGroupbox('UI','wrench')

Tabs.Addons:UpdateWarningBox({
Title = "警告",
Text = "陌生插件有一定的危险性，插件添加路径(Starring/Addons)",
IsNormal = false,
Visible = true,
LockSize = true,
})

Tabs.Info:UpdateWarningBox({
Title = "倒卖替我挡灾",
Text = "\nStarring是一个针对Roblox游戏《Doors》的玩法拓展脚本\n",
IsNormal = true,
Visible = true,
LockSize = true,
})

local Contributors = Tabs.Info:AddLeftGroupbox("开发人员","user-round-check")
Contributors:AddLabel("[千change] 所有者",true)

local TheScript = Tabs.Info:AddRightGroupbox("致谢","user-star")
TheScript:AddLabel("[mstudio45] 提供UI库",true)
TheScript:AddLabel("[mstudio45] 提供MSESP库",true)

if Floor.Value == "Rooms" then

function addpart(position)

local Part = Instance.new("Part",workspace:FindFirstChild("Path Node"))
Part.Name = "Waypoint"
Part.Size = Vector3.new(0.3, 0.3, 0.3)
Part.Position = position
Part.Anchored = true
Part.CanCollide = false
Part.Color = Color3.new(0, 1, 0)



end


function moveto(target)
local path = PathfindingService:CreatePath({
AgentRadius = 2,
AgentHeight = 0.1,
AgentCanClimb = true,

AgentCanJump = true,
WaypointSpacing = 4.5
})

path:ComputeAsync(LocalPlayer.Character.HumanoidRootPart.Position, target.Position)
if path.Status == Enum.PathStatus.Success  then

for _, waypoint in ipairs(path:GetWaypoints()) do

LocalPlayer.Character.Humanoid:MoveTo(waypoint.Position)

LocalPlayer.Character.Humanoid.MoveToFinished:Wait()

end

end


end


function moveto(target)

 local activepath = PathfindingService:CreatePath({
AgentRadius = 2,
AgentHeight = 0.1,
AgentCanClimb = false,

AgentCanJump = false,
WaypointSpacing = 5 
})

activepath:ComputeAsync(LocalPlayer.Character.HumanoidRootPart.Position, target.Position)
if activepath.Status == Enum.PathStatus.Success  then

for _, waypoint in ipairs(activepath:GetWaypoints()) do

LocalPlayer.Character.Humanoid:MoveTo(waypoint.Position)

LocalPlayer.Character.Humanoid.MoveToFinished:Wait()

 


end



end


end


FloorAnti:AddToggle('AutoRooms',{
Text = "自动房间",
Default = false
})
FloorAnti:AddLabel('建议速度40-45，不要开启穿墙',true)



Toggles.AutoRooms:OnChanged(function(Value)


if not Value then
LocalPlayer.Character.Humanoid:MoveTo(LocalPlayer.Character.HumanoidRootPart.Position)


end

end)
FloorAnti:AddDivider()

end

if Floor.Value == "Hotel" and ReplicatedStorage:FindFirstChild("RemotesFolder") then

 Objects = {
DoorNormal = true,
DoorFrame = true,
Luggage_Cart_Crouch = true,
Carpet = true,
CarpetLight = true,
Luggage_Cart = true,
DropCeiling = true,
End_DoorFrame = true,

Start_DoorFrame = true,
TriggerEventCollision = true,
StairCollision = true

}
 
function canhit(part)

if part:IsA("BasePart") then
part.CanCollide = false
elseif part:IsA("Model") then

for _, v in pairs(part:GetChildren()) do
if v:IsA("BasePart") then
v.CanCollide = false


end
end


end


end

function moveTo(part)


local pos = part.Position + part.CFrame.LookVector * -2

local path = PathfindingService:CreatePath({
AgentRadius = 0.2,
AgentHeight = 0.1,
AgentCanJump = true,
AgentCanClimb = true,
WaypointSpacing = 3 
})

path:ComputeAsync(LocalPlayer.Character.HumanoidRootPart.Position, pos)

if path.Status == Enum.PathStatus.Success then

for _, waypoint in pairs(path:GetWaypoints()) do




LocalPlayer.Character.Humanoid:MoveTo(waypoint.Position)
LocalPlayer.Character.Humanoid.MoveToFinished:Wait()

end

end
end

end

ModifiersBox:AddButton({
Text = "死亡农场",
Func = function()
if not replicatesignal or not queue_on_teleport then
Library:Notify("你的执行器不支持复制信号",3)
return 
end

if queue_on_teleport then

Library:Notify("现在开始等待",2)
loadstring(game:HttpGet("https://raw.githubusercontent.com/TheHunterSolo1/Op-Ninja-Simulator-/Main/M1reset"))()

queue_on_teleport('loadstring(game:HttpGet("https://raw.githubusercontent.com/TheHunterSolo1/Op-Ninja-Simulator-/Main/M1reset"))()')

end

end
})

if ReplicatedStorage:FindFirstChild("EntityInfo") or ReplicatedStorage:FindFirstChild("Bricks") then

FloorAnti:AddToggle('AntiBanana',{
Text = "防香蕉皮",
Default = false,
Callback = function(Value)
for _, v in ipairs(workspace:GetChildren()) do
if v.Name == "BananaPeel" then

v.CanTouch =  not Value
end
end

end
})
FloorAnti:AddToggle('AntiJeff',{
Text = "防Jeff杀手",
Default = false,
Callback = function(Value)
for _, v in ipairs(workspace:GetChildren()) do
if v.Name == "JeffTheKiller" then

for _, part in ipairs(v:GetChildren()) do
if part:IsA("BasePart") then
part.CanTouch = not Value
end
end
end
end

end
})

workspace.ChildAdded:Connect(function(v)

if v.Name == "BananaPeel" then

v.CanTouch =  not Toggles.AntiBanana.Value 
end
if v.Name == "JeffTheKiller" then
v.ChildAdded:Connect(function()
for _, part in v:GetChildren() do
if part:IsA("BasePart") then
part.CanTouch = not Toggles.AntiJeff.Value 
end
end
end)
for _, part in v:GetChildren() do
if part:IsA("BasePart") then
part.CanTouch = not Toggles.AntiJeff.Value 
end
end

end
end)
if ReplicatedStorage:FindFirstChild("EntityInfo") then 
FloorAnti:AddToggle('DeleteFigureFools',{
Text = "删除飞哥",
Default = false,
Disabled = Disable2
})
end
if ReplicatedStorage:FindFirstChild("Bricks") or ReplicatedStorage:FindFirstChild("EntityInfo") then
FloorAnti:AddToggle('Godmode',{
Text = "GodMode",
Default = false,
Callback = function(Value)
if Value then
if not Toggles.Noclip.Value then
Toggles.Noclip:SetValue(true)
end

LocalPlayer.Character.Collision.Position = LocalPlayer.Character.Collision.Position - Vector3.new(0, 11, 0)


else

LocalPlayer.Character.Collision.Position = LocalPlayer.Character.Collision.Position + Vector3.new(0, 11, 0)



end
end
})

FloorAnti:AddToggle('FigureGodmode',{
Text = "飞哥上帝模式",
Default = false,
Callback = function(Value)

end
})



end


FloorAnti:AddToggle('DeleteSeek',{
Text = "删除Seek",
Default = false
})
task.spawn(function()
while task.wait(0.09) do
if Toggles.DeleteSeek.Value then
local SeekCollision = workspace:FindFirstChild("TriggerEventCollision",true)
local Trigger = workspace:FindFirstChild("TriggerSeek",true)

if Trigger then
Trigger:Destroy()
end
if SeekCollision then
SeekCollision:ClearAllChildren()
end

end

end
end)


end
ModifiersBox:AddDivider()

SettingsBox:AddToggle('FpsUnlocker',{
     Text = "解锁帧率",
     Default = true,
Callback = function(Value)
setfpscap(Value and 9999999 or 60)

end
})

SettingsBox:AddToggle('WatermarkToggle',{
     Text = "显示水印",
     Default = false,
     Callback = function(Value)
        Library:SetWatermarkVisibility(Value)
     end
})

local FrameTimer = tick()
local FrameCounter = 0;
local FPS = 60;
 
local WatermarkConnection = game:GetService('RunService').RenderStepped:Connect(function()
    FrameCounter += 1;
 
    if (tick() - FrameTimer) >= 1 then
        FPS = FrameCounter;
        FrameTimer = tick();
        FrameCounter = 0;
    end;
 
    Library:SetWatermark(('Starring User | %s FPS | %s ms'):format(
        math.floor(FPS),
        math.floor(game:GetService('Stats').Network.ServerStatsItem['Data Ping']:GetValue())
    ));
end);

local DropTable = {
RushMoving = 54,
AmbushMoving = 67,
A60 = 70
}


InfiniteBox:AddToggle('InfiniteCrucifix', {
	Text = "无限十字架",
	Default = false,
    Risky = true,
    Tooltip = "你可能会死或失去十字架"
})

InfiniteBox:AddDivider()

local InfiniteCrucifixConnection


InfiniteCrucifixConnection = RunService.RenderStepped:Connect(function()

if Toggles.InfiniteCrucifix.Value then


for _, v in ipairs(workspace:GetChildren()) do

local Entity = DropTable[v.Name]

if Entity and v.PrimaryPart then
v.PrimaryPart.CanCollide = true
v.PrimaryPart.CanQuery = true
local origin2  = LocalPlayer.Character.CollisionPart.Position
local direction2 = (v.PrimaryPart.Position - origin2)
local result2 = workspace:Raycast(origin2, direction2, raycastParms)


if result2 and result2.Instance:IsDescendantOf(v) then

if (LocalPlayer.Character.CollisionPart.Position - v.PrimaryPart.Position).Magnitude < Entity then

ReplicatedStorage.RemotesFolder.DropItem:FireServer(LocalPlayer.Character:FindFirstChildOfClass("Tool"))

task.wait(0.54)
if Workspace:FindFirstChild("Drops") and Workspace.Drops:FindFirstChild("Crucifix") then
fireproximityprompt(workspace.Drops:WaitForChild("Crucifix"):FindFirstChildOfClass("ProximityPrompt"))
end

end


end 

end

end


end


end)


SettingsBox:AddToggle('PlaySound',{
     Text = "播放声音",
     Default = true,
Callback = function(Value)
PlayingSound = Value

end
})




SettingsBox:AddDropdown("NotificationSide", {
	Values = { "Left", "Right" },
	Default = "Right",

	Text = "通知位置",

	Callback = function(Value)
		Library:SetNotifySide(Value)
	end,
})

local OptionNotify = "Obsidian"
function Notify(txt,desc,reason)
if OptionNotify then 
Library:Notify(txt,3)

 elseif OptionNotify == "Doors" then
local Achievement = game:GetService("Players").LocalPlayer.PlayerGui.MainUI.AchievementsHolder.Achievement:Clone()
Achievement.Size = UDim2.new(0, 0, 0, 0)
Achievement.Visible = true
Achievement:WaitForChild("Sound",9e9):Play()
Achievement:WaitForChild("Frame"):WaitForChild("Details").Title.Text = txt
Achievement:WaitForChild("Frame"):WaitForChild("Details").Reason.Text = reason
Achievement:WaitForChild("Frame"):WaitForChild("Details").Desc.Text = desc


game:GetService("TweenService"):Create(Achievement,TweenInfo.new(1.5),{Size = UDim2.new(1, 0, 0, 0)}):Play()

task.wait(1)
Achievement:Destroy()

end

end

MiscBox:AddToggle('InstantPrompt',{
     Text = "快速互动",
     Default = false,
    Callback = function(Value)
if Value then
for _, v in ipairs(workspace.CurrentRooms:GetDescendants()) do



if v:IsA("ProximityPrompt") then


v:SetAttribute("Hold",v.HoldDuration)

v.HoldDuration = 0

end

end

else


for _, v in ipairs(workspace.CurrentRooms:GetDescendants()) do



if v:IsA("ProximityPrompt") then



v.HoldDuration = v:GetAttribute("Hold") or 0.7

end


end

end

end
})

MiscBox:AddToggle('PromptClip',{
     Text = "穿墙互动",
     Default = false,
Callback = function(Value)
if Value then

for _, v in ipairs(workspace.CurrentRooms:GetDescendants()) do


if v:IsA("ProximityPrompt") then


v.RequiresLineOfSight = false


end


end

else

for _, v in ipairs(workspace.CurrentRooms:GetDescendants()) do


if v:IsA("ProximityPrompt") then


v.RequiresLineOfSight = true


end


end



end

end

})


MiscBox:AddToggle('AntiAfk',{
     Text = "防挂机",
     Default = false
})
table.insert(Connections,LocalPlayer.Idled:Connect(function()

if Toggles.AntiAfk.Value then

VirtualUser:CaptureController()

VirtualUser:ClickButton2(Vector2.new())



end
end))

MiscBox:AddToggle('AntiLag',{
     Text = "防卡顿",
     Default = false,
    Callback = function(Value)
if Value then
for _, v in ipairs(workspace.CurrentRooms:GetDescendants()) do
if v:IsA("BasePart") then
v.Material = Enum.Material.Plastic
end
if v.Name == "LightFixture" or v.Name == "Carpet" or v.Name == "CarpetLight" then
v:Destroy()
end



end

end
end

})

ReachBox:AddToggle('PromptReach',{
     Text = "增长互动",
     Default = false,
Callback = function(Value)
if Value then
for _, v in ipairs(workspace.CurrentRooms:GetDescendants()) do
if v:IsA("ProximityPrompt") then
v:SetAttribute("Distance",v.MaxActivationDistance)
v.MaxActivationDistance = v.MaxActivationDistance * promptReachMultiplier
end
end
else
for _, v in ipairs(workspace.CurrentRooms:GetDescendants()) do
if v:IsA("ProximityPrompt") then
v.MaxActivationDistance = v:GetAttribute("Distance") or 7
end
end
end
end
})

local Range = 20
ReachBox:AddToggle('DoorReach',{
     Text = "延长开门",
     Default = false
})

ReachBox:AddSlider("PromptReachMultiplier", {
    Text = "互动距离",
    Default = 1.0,
    Min = 1.0,
    Max = 2.0,
    Rounding = 1,
    Compact = true,
    Callback = function(Value)
        promptReachMultiplier = Value
        if Toggles.PromptReach and Toggles.PromptReach.Value then
            Toggles.PromptReach:SetValue(false)
            Toggles.PromptReach:SetValue(true)
        end
    end,
})
ReachBox:AddSlider("DoorReachRange", {
        Text = "开门距离",
        Default = 20,
        Min = 15,
        Max = 30,
        Rounding = 1,
        Compact = true,

        Callback = function(Value)
          Range = Value

     end,      
})


MiscBox:AddToggle('NoCutscenes',{
     Text = "无过场动画",
     Default = false
})

local TransparencyValue = 0.5
ClosetTran:AddSlider("TransparencySlider", {
        Text = "柜子透明度",
        Default = 0.5,
        Min = 0.1,
        Max = 1,
        Rounding = 1,
        Compact = true,

        Callback = function(Value)
        TransparencyValue   = Value

     end,      
})

ClosetTran:AddToggle('TransparencyCloset',{
Text = "柜子透明",
Default = false
})
ClosetTran:AddDivider()
local CartTransparencyValue = 0.5
ClosetTran:AddSlider("CartTransparencySlider", {
        Text = "矿车透明度",
        Default = 0.5,
        Min = 0.1,
        Max = 1,
        Rounding = 1,
        Compact = true,

        Callback = function(Value)
        CartTransparencyValue   = Value

     end,      
})

ClosetTran:AddToggle('TransparencyCart',{
Text = "矿车透明",
Default = false
})

ClosetTran:AddDivider()

ClosetTran:AddToggle('NoVignette', {
    Text = "柜子无暗角",
    Default = false
})

local noVignetteLoop = nil

Toggles.NoVignette:OnChanged(function(Value)
if Value then

noVignetteLoop = RunService.Heartbeat:Connect(function()
if not Toggles.NoVignette.Value then return end

local playerGui = LocalPlayer.PlayerGui
if playerGui and playerGui:FindFirstChild("MainUI") then
local mainUI = playerGui.MainUI
if mainUI and mainUI:FindFirstChild("MainFrame") then
local mainFrame = mainUI.MainFrame
if mainFrame and mainFrame:FindFirstChild("HideVignette") then
mainFrame.HideVignette.Visible = false
end
end
end
end)
else
if noVignetteLoop then
noVignetteLoop:Disconnect()
noVignetteLoop = nil
end
end
end)

ClosetTran:AddToggle('NoOxygenVignette', {
    Text = "缺氧无暗边",
    Default = false
})

local noOxygenVignetteLoop = nil
Toggles.NoOxygenVignette:OnChanged(function(Value)
if Value then
noOxygenVignetteLoop = RunService.Heartbeat:Connect(function()
if not Toggles.NoOxygenVignette.Value then return end
local playerGui = LocalPlayer.PlayerGui
if playerGui and playerGui:FindFirstChild("MainUI") then
local mainUI = playerGui.MainUI
if mainUI and mainUI:FindFirstChild("MainFrame") then
local mainFrame = mainUI.MainFrame
if mainFrame and mainFrame:FindFirstChild("EyelidsVignette") then
mainFrame.EyelidsVignette.Visible = false
end
end
end
local oxygenBlur = Lighting:FindFirstChild("OxygenBlur")
if oxygenBlur then
oxygenBlur:Destroy()
end
local oxygenCC = Lighting:FindFirstChild("OxygenCC")
if oxygenCC then
oxygenCC:Destroy()
end
end)
else
if noOxygenVignetteLoop then
noOxygenVignetteLoop:Disconnect()
noOxygenVignetteLoop = nil
end
end
end)

Camera:AddToggle('Fullbright',{
     Text = "全亮",
     Default = false,
Callback = function(Value)
if Value then

else
game.Lighting.Ambient = Color3.fromRGB(0, 0, 0)


end
end
})
Camera:AddToggle('NoCameraShake',{
     Text = "无相机抖动",
     Default = false,
Disabled = Disable1
})
Camera:AddDivider()

local ThirdPersonHandler = {enabled = false, offset = Vector3.new(2, 0, 6)}

local function ThirdPersonStep()
if not ThirdPersonHandler.enabled then return end

local cam = workspace.CurrentCamera
local char = LocalPlayer.Character
if not cam or not char then return end

cam.CFrame = cam.CFrame * CFrame.new(ThirdPersonHandler.offset)

for _, part in ipairs(char:GetDescendants()) do
if part:IsA("BasePart") and part.Name == "Head" then
part.LocalTransparencyModifier = 0
elseif part:IsA("Accessory") and part:FindFirstChild("Handle") then
part.Handle.LocalTransparencyModifier = 0
end
end
end

pcall(function() RunService:UnbindFromRenderStep("THIRD_PERSON_SYS") end)
RunService:BindToRenderStep("THIRD_PERSON_SYS", Enum.RenderPriority.Camera.Value+1, ThirdPersonStep)

workspace:GetPropertyChangedSignal("CurrentCamera"):Connect(function()
if ThirdPersonHandler.enabled then
ThirdPersonHandler.enabled = false
task.wait(0.1)
ThirdPersonHandler.enabled = true
end
end)

local X, Y, Z = 2, 0, 6

Camera:AddSlider("X", {
    Text = "X",
    Default = X,
    Min = -10,
    Max = 10,
    Rounding = 0,
    Compact = true,
Callback = function(Value)
X = Value
ThirdPersonHandler.offset = Vector3.new(X, Y, Z)
end      
})

Camera:AddSlider("Y", {
    Text = "Y",
    Default = Y,
    Min = -10,
    Max = 10,
    Rounding = 0,
    Compact = true,
Callback = function(Value)
Y = Value
ThirdPersonHandler.offset = Vector3.new(X, Y, Z)
end      
})

Camera:AddSlider("Z", {
    Text = "Z",
    Default = Z,
    Min = -10,
    Max = 10,
    Rounding = 0,
    Compact = true,
Callback = function(Value)
Z = Value
ThirdPersonHandler.offset = Vector3.new(X, Y, Z)
end      
})

Camera:AddToggle('ThirdPerson', {
    Text = "第三人称",
    Default = false,
Callback = function(Value)
ThirdPersonHandler.enabled = Value
if not Value then
local char = LocalPlayer.Character
if char then
for _, part in ipairs(char:GetDescendants()) do
if part:IsA("BasePart") and part.Name == "Head" then
part.LocalTransparencyModifier = 1
elseif part:IsA("Accessory") and part:FindFirstChild("Handle") then
part.Handle.LocalTransparencyModifier = 1
end
end
end
end
end
}):AddKeyPicker('ThirdPKeybind', {
    Default = 'T',
    SyncToggleState = true,
    Mode = 'Toggle',
    Text = '第三人称',
    NoUI = false,
Callback = function(Value) end,
ChangedCallback = function(New) end
})
Camera:AddDivider()


local SpectateTable = {
RushMoving = true,
AmbushMoving = true,
A60 = true,
A120 = true,
GlitchRush = true,
GlitchAmbush = true
}


Camera:AddToggle('SpectateEntity',{
     Text = "观察实体",
     Default = false
})

NotifyBox:AddDropdown("EntitiesPicker", {
        Values = { "Rush","Ambush","A-60","A-120","Bramble","Grumble","Eyes","Lookman","Blitz","Figure","GlitchRush","GlitchAmbush","Monument","Groundskeeper","Seek"},
        Default = 1,
        Multi = true,

        Text = "实体",
        

        Callback = function(Value)
               
        end,

        
})

NotifyBox:AddToggle('EntityNotifys',{
     Text = "通知实体",
     Default = false
})

NySet:AddToggle('NotifyChat',{
     Text = "聊天通知实体",
     Default = false,
Callback = function(Value)
if Value then
if not notifyChatRunning then
notifyChatRunning = true

local TextChatService = game:GetService("TextChatService")
local Workspace = game:GetService("Workspace")

local entityNameMap = {
Rush = "Rush",
Ambush = "Ambush", 
["A-60"] = "A-60",
["A-120"] = "A-120",
Eyes = "Eyes",
Lookman = "Lookman",
Blitz = "Blitz",
Monument = "Monument",
Groundskeeper = "Groundskeeper",
Seek = "Seek"
}

local entityModelMap = {
Rush = "RushMoving",
Ambush = "AmbushMoving",
["A-60"] = "A60",
["A-120"] = "A120",
Eyes = "Eyes",
Lookman = "BackdoorLookman",
Blitz = "BackdoorRush",
Monument = "MonumentEntity",
Groundskeeper = "Groundskeeper",
Seek = "SeekMovingNewClone"
}

local detectedInstances = {}

for entityName, modelName in pairs(entityModelMap) do
detectedInstances[modelName] = {}
end

local function sendMessage(message)
if TextChatService and TextChatService.TextChannels then
local channel = TextChatService.TextChannels:FindFirstChild("RBXGeneral")
if channel then
channel:SendAsync(message)
end
end
end

local function checkForEntities()
if not notifyChatRunning then return end

local children = Workspace:GetDescendants()

for _, child in ipairs(children) do
if child:IsA("Model") then
for entityName, modelName in pairs(entityModelMap) do
if Options.EntitiesPicker.Value[entityName] then
if child.Name == modelName then
if not detectedInstances[modelName][child] then
detectedInstances[modelName][child] = true
local displayName = entityNameMap[entityName] or entityName

local messageFormat = Options.ChatMessageFormat.Value or "% 已生成"
local chatMessage = messageFormat:gsub("%%", displayName)

sendMessage(chatMessage)
end
break
end
end
end
end
end

for modelName, instances in pairs(detectedInstances) do
for instance in pairs(instances) do
if not instance:IsDescendantOf(Workspace) then
detectedInstances[modelName][instance] = nil
end
end
end
end

notifyChatConnection = game:GetService("RunService").Heartbeat:Connect(function()
if not notifyChatRunning then
return
end
checkForEntities()
end)
end
else
notifyChatRunning = false
if notifyChatConnection then
notifyChatConnection:Disconnect()
notifyChatConnection = nil
end
end
end
})

NySet:AddInput("ChatMessageFormat", {
    Default = "% 已生成",
    Numeric = false,
    Finished = false,
    Text = "聊天消息格式",
    Tooltip = "% 将被替换为实体名称",
    Callback = function(Value)
    end,
})

local notifyChatRunning = false
local notifyChatConnection = nil

if notifyChatConnection then
notifyChatConnection:Disconnect()
notifyChatConnection = nil
end
notifyChatRunning = false

MiscBox:AddButton({
     Text = "重置人物",
DoubleClick = true,
     Func = function()
if Disable4 == false then

replicatesignal(LocalPlayer.Kill)

elseif Disable4 == true then

LocalPlayer.Character.Humanoid.Health = 0

end

end
})

MiscBox:AddButton({
     Text = "再玩一次",
DoubleClick = true,
     Func = function()
RemoteFolder.PlayAgain:FireServer()
end
})

MiscBox:AddButton({
     Text = "返回大厅",
DoubleClick = true,
     Func = function()
RemoteFolder.Lobby:FireServer()
end
})


MiscBox:AddButton({
     Text = "玩家复活",
DoubleClick = true,
     Func = function()
RemoteFolder.Revive:FireServer()
end
})


if ReplicatedStorage:FindFirstChild("RemotesFolder") then
local dropRemote = RemoteFolder:FindFirstChild("DropItem")


function addFake(prompt, mode)
	if not prompt or not prompt:IsA("ProximityPrompt") then return end
	if prompt:GetAttribute("HasFake") then return end
	prompt:SetAttribute("HasFake", true)
	local fake = prompt:Clone()
	fake.Name = "FakePrompt"
	fake.Parent = prompt.Parent
	fake.Enabled = true
	fake.ClickablePrompt = true
	prompt.Enabled = false
	prompt.ClickablePrompt = false

	fake.Triggered:Connect(function()
		local tool = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Tool")
		if not tool then return end

		
			dropRemote:FireServer(tool)
		

		local con
		con = Workspace.Drops.ChildAdded:Connect(function(v)
			local p = v:FindFirstChildOfClass("ProximityPrompt")
			if p then
				if mode == "Lockpick" then
					fireInteract(p)
					fireInteract(prompt)
				elseif mode == "Shears" then
					fireInteract(prompt)
					fireInteract(p)
				end

				task.wait(0.3)
				con:Disconnect()
			end
		end)
	end)
end

local function scanPrompts(validParents, validNames)
	local t = {}
	for _, v in ipairs(Workspace.CurrentRooms:GetDescendants()) do
		if v:IsA("ProximityPrompt") and (validParents[v.Parent.Name] or validNames[v.Name]) then
			table.insert(t, v)
		end
	end
	return t
end

 function cleanupEnableReal()
	for _, v in ipairs(Workspace.CurrentRooms:GetDescendants()) do
		if v.Name == "FakePrompt" and v.Parent then
			v:Destroy()
		end
		if v:IsA("ProximityPrompt") and v.Name ~= "FakePrompt" then
			pcall(function()
				v.Enabled = true
				v.ClickablePrompt = true
if v:GetAttribute("HasFake") == true then

v:SetAttribute("HasFake",nil)

end

			end)
		end
	end
end

 LockpickParents = { ChestBoxLocked = true, Locker_Small_Locked = true, Toolbox_Locked = true }
 LockpickNames = { UnlockPrompt = true, ThingToEnable = true, LockPrompt = true,
SkullPrompt = true, FusesPrompt = true }

 ShearsParents = { Chest_Vine = true, CuttableVines = true, Cellar = true }
 ShearsNames = { SkullPrompt = true }


local InfiniteValue = false
 InfStore = {}
local removed = false
InfiniteBox:AddToggle('InfiniteItems', {
	Text = "无限撬锁器/骷髅钥匙",
Disabled = Disable3,
	Default = false,

	Callback = function(Value)
		InfiniteValue = Value
		if not InfiniteValue then
			cleanupEnableReal()
			InfStore = {}
			return
		end
		InfStore = scanPrompts(LockpickParents, LockpickNames)
	end
})

local InfiniteSValue = false
 InfSStore = {}
local removed2 = false

InfiniteBox:AddToggle('InfiniteSItems', {
	Text = "无限剪刀",
Disabled = Disable3,
	Default = false,
	Callback = function(Value)
		InfiniteSValue = Value
		if not InfiniteSValue then
			cleanupEnableReal()
			InfSStore = {}
			return
		end
		InfSStore = scanPrompts(ShearsParents, ShearsNames)
						
		
	end
})
end

InfiniteBox:AddDivider()

InfiniteBox:AddButton({
	Text = "启用黄色裂缝",
	Func = function()
		local Event = game:GetService("ReplicatedStorage").ReplicaRemoteEvents.Replica_ReplicaSetValue
		firesignal(Event.OnClientEvent, 
			2,
			{
				"StarRiftItem"
			},
			{
				Exists = true
			}
		)
		Library:Notify("黄色裂缝已启用", 3)
	end
})

 Speed = 15
Movement:AddSlider("SpeedBoostSlider", {
        Text = "移动速度滑块",
        Default = 15,
        Min = 15,
        Max = 21,
        Rounding = 1,

        Callback = function(Value)
           Speed = Value

     end,      
})

local MaxSlopeAngle = 45
Movement:AddSlider("MaxSlopeAngleSlider", {
    Text = "最大斜坡角度",
    Default = 45,
    Min = 0,
    Max = 90,
    Rounding = 0,
    Compact = true,
    Callback = function(Value)
        MaxSlopeAngle = Value
        if Character and Character:FindFirstChild("Humanoid") then
            Character.Humanoid.MaxSlopeAngle = Value
        end
    end,
})

Movement:AddToggle('SpeedBoost',{
     Text = "移动速度",
     Default = false
})

Movement:AddDivider()
Movement:AddToggle('Noclip',{
     Text = "穿墙",
     Default = false
}):AddKeyPicker('NoclipKeybind', {


		Default = 'N',
		Mode = 'Toggle',
		Text = '穿墙',
		NoUI = false,
		Callback = function(Value)
		end,
		SyncToggleState = true,
		ChangedCallback = function(New)
		end
	})


Toggles.Noclip:OnChanged(function(Value)
if not Value then 
LocalPlayer.Character.Collision.CanCollide = true 
if Character.Collision:FindFirstChild("CollisionCrouch") then
LocalPlayer.Character.Collision.CollisionCrouch.CanCollide = true
end
LocalPlayer.Character.HumanoidRootPart.CanCollide = true
if LocalPlayer.Character:FindFirstChild("CollisionPart") then
LocalPlayer.Character:FindFirstChild("CollisionPart").CanCollide = true
end
end

end)
Movement:AddDivider()

Movement:AddSlider("JumpPowerSlider", {
        Text = "跳跃提升",
        Default = 5,
        Min = 0,
        Max = 50,
        Rounding = 1,
Compact = false,
Callback = function(Value)
end,      
})

local jumpPowerValue = 5
local jumpPowerConnections = {}
local function applyJumpPower()
local character = LocalPlayer.Character
if not character then return end
local humanoid = character:FindFirstChildOfClass("Humanoid")
if not humanoid then return end
if jumpPowerConnections.character then
jumpPowerConnections.character:Disconnect()
jumpPowerConnections.character = nil
end
if jumpPowerConnections.jumpPower then
jumpPowerConnections.jumpPower:Disconnect()
jumpPowerConnections.jumpPower = nil
end
if jumpPowerConnections.jumpHeight then
jumpPowerConnections.jumpHeight:Disconnect()
jumpPowerConnections.jumpHeight = nil
end
if humanoid.UseJumpPower then
humanoid.JumpPower = jumpPowerValue
jumpPowerConnections.jumpPower = humanoid:GetPropertyChangedSignal("JumpPower"):Connect(function()
if humanoid.JumpPower ~= jumpPowerValue then
humanoid.JumpPower = jumpPowerValue
end
end)
else
humanoid.JumpHeight = jumpPowerValue
jumpPowerConnections.jumpHeight = humanoid:GetPropertyChangedSignal("JumpHeight"):Connect(function()
if humanoid.JumpHeight ~= jumpPowerValue then
humanoid.JumpHeight = jumpPowerValue
end
end)
end
end

if LocalPlayer.Character then
applyJumpPower()
end
jumpPowerConnections.character = LocalPlayer.CharacterAdded:Connect(function(character)
character:WaitForChildOfClass("Humanoid")
applyJumpPower()
end)
Options.JumpPowerSlider:OnChanged(function()
jumpPowerValue = Options.JumpPowerSlider.Value
applyJumpPower()
end)

Movement:AddToggle('EnableJump',{
     Text = "启用跳跃",
     Default = false
})

Movement:AddToggle('InfiniteJump',{
     Text = "无限跳跃",
     Default = false
})
Movement:AddDivider()

SettingsESP:AddDropdown("ESPType", {
Values = {"Text", "SphereAdornment", "CylinderAdornment", "Adornment", "SelectionBox", "Highlight"},
Default = "Highlight",
Text = "ESP类型",
Callback = function(Value)
ESPConfig.ESPType = Value
RecreateAllESP()
end,
})

SettingsESP:AddToggle('EnableShowDistancws',{
     Text = "显示距离",
     Default = false,
Callback = function(Value)
    ESPConfig.ShowDistance = Value
    UpdateAllESPConfig()
end
})

SettingsESP:AddToggle("ShowTracersToggle", {
    Text = "追踪线",
    Default = ESPConfig.ShowTracers,
    Callback = function(Value)
        ESPConfig.ShowTracers = Value
        UpdateAllESPConfig()
    end,
})

SettingsESP:AddToggle('RainbowESP', {
    Text = '彩色ESP',
    Default = false,
    Callback = function(Value)
        ESPLibrary.GlobalConfig.Rainbow = Value
        UpdateAllESPConfig()
    end
})

SettingsESP:AddDropdown("TracerPosition", {
    Values = {"Top", "Bottom", "Center", "Mouse"},
    Default = ESPConfig.Tracer.Position,
    Text = "追踪线位置",
    Callback = function(Value)
        ESPConfig.Tracer.Position = Value
        RecreateAllESP()
    end,
})

SettingsESP:AddSlider("TextSizeSlider", {
    Text = "文本大小",
    Default = ESPConfig.TextSize,
    Min = 10,
    Max = 50,
    Rounding = 0,
    Compact = true,
    Callback = function(Value)
        ESPConfig.TextSize = Value
        UpdateAllESPConfig()
    end,
})

SettingsESP:AddSlider("ESPFillTransparency", {
    Text = "填充透明度",
    Default = 0.7,
    Min = 0,
    Max = 1.0,
    Rounding = 2,
    Compact = true,
Callback = function(Value)
for _, espObject in pairs(ESPObjects) do
if espObject and espObject.CurrentSettings then
espObject.CurrentSettings.FillTransparency = Value
end
end
end
})

SettingsESP:AddSlider("ESPOutlineTransparency", {
    Text = "轮廓透明度",
    Default = 0.4,
    Min = 0,
    Max = 1.0,
    Rounding = 2,
    Compact = true,
Callback = function(Value)
for _, espObject in pairs(ESPObjects) do
if espObject and espObject.CurrentSettings then
espObject.CurrentSettings.OutlineTransparency = Value
end
end
end
})

Ignore = {
HidePrompt = true,

RiftPrompt = true,

StarRiftPrompt = true,

InteractPrompt = true,

FakePrompt = true,

PushPrompt = true,

ClimbPrompt = true,

RevivePrompt = true,

PropPrompt = true,

NoHidingLilBro = true,

DonatePrompt = true

}




 AutoInteractTable = {}
Automation:AddToggle('AutoInteract',{
     Text = "自动互动",
     Default = false,

Callback = function(Value)
if Value then

for _, v in ipairs(workspace.CurrentRooms:GetDescendants()) do

if not Ignore[v.Name] then


if v:IsA("ProximityPrompt") then

table.insert(AutoInteractTable,v)
end
end
end
else
table.clear(AutoInteractTable)
end
end
}):AddKeyPicker('AutoInteractKeybind', {


Default = 'R',
SyncToggleState = true,
Mode = 'Toggle',
Text = '自动互动',
NoUI = false,
Callback = function(Value)
end,
ChangedCallback = function(New)
end
})

Automation:AddDropdown("IgnoreList", {
Values = {"Jeff物品","金币","糖果","丢弃物品","故障方块","死亡糖果","Grampy物品"},
    Default = 1,
    Multi = true,
    Text = "忽略列表",
Callback = function(Value)
end,
})

Automation:AddDivider()

Automation:AddToggle('AutoHeartbeatMiniGame',{

     Text = "自动心跳小游戏",
     Disabled = Disable5,
     Default = false

})

local UnlockDistance = 40

Automation:AddSlider('UnlockPadLockDistance', {
	Text = '解挂锁距离',
	Min = 40, Max = 100, Default = 40,
	Rounding = 1,
	Callback = function(v)
		UnlockDistance = v
	end
})
local RepStore = game:GetService("ReplicatedStorage")
local PS = game:GetService("Players")
local PlayerGui = LocalPlayer.PlayerGui

local function findPL()
	
return RemoteFolder:FindFirstChild("PL")
end

local PL = findPL()

local function parsePaper(paper, hintsContainer)
	local children = paper:WaitForChild("UI"):GetChildren()
	local map, order = {}, {}
	for i = 1, #children do
		local c = children[i]
		local idx = tonumber(c.Name)
		if idx then
			local key = c.ImageRectOffset.X .. "_" .. c.ImageRectOffset.Y
			map[key] = { idx, "" }
			order[idx] = key
		end
	end
	if hintsContainer then
		for _, ic in ipairs(hintsContainer:GetChildren()) do
			if ic.Name == "Icon" then
				local key = ic.ImageRectOffset.X .. "_" .. ic.ImageRectOffset.Y
				local entry = map[key]
				if entry then
					local lbl = ic:FindFirstChildWhichIsA("TextLabel")
					if lbl then entry[2] = lbl.Text end
				end
			end
		end
	end
	local parts = {}
	for i = 1, #order do
		parts[i] = map[ order[i] ][2]
	end
	return table.concat(parts)
end

local function manageToggle(toggleName, mode,place)
	local seenPapers = {}
	local lastCodes = {}
	local lastFireTimes = {}
	local padPart
	local conns = {}
	local enabled = false

	local function disconnectAll()
		for _, c in ipairs(conns) do
			if c.Disconnect then c:Disconnect() end
		end
		conns = {}
	end

	local function updatePad()
		local idx = RepStore.GameData.LatestRoom.Value
		local roomRoot = workspace.CurrentRooms and workspace.CurrentRooms[idx]
		if roomRoot then
			local pad = roomRoot:FindFirstChild("Padlock", true)
			padPart = pad and (pad.PrimaryPart or pad:FindFirstChildWhichIsA("BasePart"))
		else
			padPart = nil
		end
	end

	local function handleCode(paper)
		local hints = PlayerGui:FindFirstChild("PermUI") and PlayerGui.PermUI:FindFirstChild("Hints")
		local code = parsePaper(paper, hints)
		if lastCodes[paper] ~= code and code ~= "" then
			lastCodes[paper] = code
			if mode == "Fire" then
				if padPart and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
					local dist = (LocalPlayer.Character.HumanoidRootPart.Position - padPart.Position).Magnitude
					if dist <= UnlockDistance then
						local now = tick()
						if not lastFireTimes[code] or now - lastFireTimes[code] > 1 then
							local ok = pcall(function() if PL then PL:FireServer(code) end end)
							if ok then lastFireTimes[code] = now end
						end
					end
				end
			else
				Library:Notify("挂锁密码是 "..code,3)
			end
		end
	end

	local function addPaper(paper)
		if seenPapers[paper] then return end
		seenPapers[paper] = true
		conns[#conns+1] = paper.DescendantAdded:Connect(function()
			handleCode(paper)
		end)
		conns[#conns+1] = paper.DescendantRemoving:Connect(function()
			handleCode(paper)
		end)
		handleCode(paper)
	end

	local function removePaper(paper)
		seenPapers[paper] = nil
		lastCodes[paper] = nil
	end

	place:AddToggle(toggleName, {
		Text = (mode == "Fire") and "自动解挂锁" or "通知挂锁密码",
		Default = false,
		Tooltip = (mode == "Fire") and "在有效范围内自动解锁挂锁" or "将密码显示为通知",
		Callback = function(on)
			enabled = on
			disconnectAll()
			table.clear(seenPapers)
			table.clear(lastCodes)
			table.clear(lastFireTimes)

			if enabled then
				while RepStore.GameData.LatestRoom.Value < 50 do
					task.wait(0.4)
					if not enabled then return end
				end

				updatePad()
				conns[#conns+1] = RepStore.GameData.LatestRoom:GetPropertyChangedSignal("Value"):Connect(updatePad)

				local function scanContainer(container)
					for _, obj in ipairs(container:GetChildren()) do
						if obj.Name == "LibraryHintPaper" or obj.Name == "LibraryHintPaperHard" then
							addPaper(obj)
						end
					end
				end

				scanContainer(LocalPlayer.Character)
				scanContainer(LocalPlayer.Backpack)

				conns[#conns+1] = LocalPlayer.Backpack.ChildAdded:Connect(function(obj)
					if obj.Name == "LibraryHintPaper" or obj.Name == "LibraryHintPaperHard" then
						addPaper(obj)
					end
				end)
				conns[#conns+1] = LocalPlayer.Backpack.ChildRemoved:Connect(removePaper)
				conns[#conns+1] = LocalPlayer.Backpack.ChildAdded:Connect(function(obj)
					if obj.Name == "LibraryHintPaper" or obj.Name == "LibraryHintPaperHard" then
						addPaper(obj)
					end
				end)
				conns[#conns+1] = LocalPlayer.Backpack.ChildRemoved:Connect(removePaper)
			end
		end
	})
end

manageToggle("AutoCodeFire",   "Fire",Automation)
manageToggle("AutoCodeNotify", "Notify",NotifyBox)

local oxygenNotifyRunning = false
local oxygenNotifyUI = nil
local oxygenNotifyConnection = nil
local oxygenHideTimer = nil

NotifyBox:AddToggle('OxygenNotify',{
     Text = "通知氧气",
     Default = false,
     Callback = function(Value)
        if Value then
            if not oxygenNotifyRunning then
                oxygenNotifyRunning = true
                
                if not oxygenNotifyUI then
                    oxygenNotifyUI = Instance.new("ScreenGui")
                    oxygenNotifyUI.Name = "OxygenNotifyUI"
                    oxygenNotifyUI.Parent = game:GetService("CoreGui")
                    oxygenNotifyUI.ResetOnSpawn = false
                    oxygenNotifyUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
                    
                    local frame = Instance.new("Frame")
                    frame.Size = UDim2.new(0, 120, 0, 45)
                    frame.Position = UDim2.new(0.5, -100, 0.8, -30)
                    frame.AnchorPoint = Vector2.new(0.5, 0.5)
                    frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
                    frame.BorderSizePixel = 0
                    frame.BackgroundTransparency = 0.3
                    frame.Parent = oxygenNotifyUI
                    
                    local corner = Instance.new("UICorner")
                    corner.CornerRadius = UDim.new(0, 8)
                    corner.Parent = frame
                    
                    local textLabel = Instance.new("TextLabel")
                    textLabel.Size = UDim2.new(1, 0, 1, 0)
                    textLabel.BackgroundTransparency = 1
                    textLabel.Text = "氧气: 100%"
                    textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                    textLabel.TextSize = 18
                    textLabel.Font = Enum.Font.Gotham
                    textLabel.Parent = frame
                    
                    oxygenNotifyUI.Enabled = false
                end
                
                local function updateOxygenDisplay(oxygenValue)
                    if oxygenNotifyUI and oxygenNotifyUI:FindFirstChildOfClass("Frame") then
                        local frame = oxygenNotifyUI:FindFirstChildOfClass("Frame")
                        local textLabel = frame:FindFirstChildOfClass("TextLabel")
                        
                        if textLabel then
                            textLabel.Text = "氧气: " .. tostring(math.floor(oxygenValue)) .. "%"
                            
                            if oxygenValue < 30 then
                                textLabel.TextColor3 = Color3.fromRGB(255, 0, 0)
                            elseif oxygenValue < 60 then
                                textLabel.TextColor3 = Color3.fromRGB(255, 165, 0)
                            else
                                textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                            end
                        end
                    end
                end
                
                local function checkOxygen(character)
                    if not character then
                        character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
                    end
                    
                    if not character then return nil end
                    
                    local oxygenValue = character:GetAttribute("Oxygen")
                    if oxygenValue then
                        return oxygenValue
                    end
                    
                    local oxygenObj = character:FindFirstChild("Oxygen")
                    if oxygenObj and oxygenObj:IsA("NumberValue") then
                        return oxygenObj.Value
                    end
                    
                    return nil
                end
                
                oxygenNotifyConnection = game:GetService("RunService").Heartbeat:Connect(function()
                    if not oxygenNotifyRunning then
                        return
                    end
                    
                    local character = LocalPlayer.Character
                    
                    if not character then
                        oxygenNotifyUI.Enabled = false
                        return
                    end
                    
                    local oxygenValue = checkOxygen(character)
                    
                    if oxygenValue then
                        if oxygenValue < 100 then
                            oxygenNotifyUI.Enabled = true
                            updateOxygenDisplay(oxygenValue)
                            
                            if oxygenHideTimer then
                                oxygenHideTimer:Cancel()
                                oxygenHideTimer = nil
                            end
                        else
                            if oxygenNotifyUI.Enabled and not oxygenHideTimer then
                                oxygenHideTimer = task.delay(3, function()
                                    if oxygenNotifyUI and oxygenNotifyRunning then
                                        oxygenNotifyUI.Enabled = false
                                        oxygenHideTimer = nil
                                    end
                                end)
                            end
                        end
                    else
                        oxygenNotifyUI.Enabled = false
                    end
                end)
                
                LocalPlayer.CharacterAdded:Connect(function(newCharacter)
                    if not oxygenNotifyRunning then return end
                    
                    task.wait(1)
                    local oxygenValue = checkOxygen(newCharacter)
                    if oxygenValue and oxygenValue < 100 then
                        oxygenNotifyUI.Enabled = true
                        updateOxygenDisplay(oxygenValue)
                    else
                        oxygenNotifyUI.Enabled = false
                    end
                end)
            end
        else
            oxygenNotifyRunning = false
            
            if oxygenNotifyConnection then
                oxygenNotifyConnection:Disconnect()
                oxygenNotifyConnection = nil
            end
            
            if oxygenHideTimer then
                oxygenHideTimer:Cancel()
                oxygenHideTimer = nil
            end
            
            if oxygenNotifyUI then
                oxygenNotifyUI.Enabled = false
            end
        end
    end
})

local hasteClockUI = nil
local hasteClockConnection = nil
local hasteClockRoomConnection = nil

NotifyBox:AddToggle('HasteClock',{
     Text = "通知倒计时",
     Default = false,
     Callback = function(Value)
        if Value then
            if not hasteClockUI then
                hasteClockUI = Instance.new("ScreenGui")
                hasteClockUI.Name = "HasteClockUI"
                hasteClockUI.Parent = game:GetService("CoreGui")
                hasteClockUI.ResetOnSpawn = false
                hasteClockUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
                
                local frame = Instance.new("Frame")
                frame.Size = UDim2.new(0, 150, 0, 45)
                frame.Position = UDim2.new(0.5, 100, 0.8, -30)
                frame.AnchorPoint = Vector2.new(0.5, 0.5)
                frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
                frame.BorderSizePixel = 0
                frame.BackgroundTransparency = 0.3
                frame.Parent = hasteClockUI
                
                local corner = Instance.new("UICorner")
                corner.CornerRadius = UDim.new(0, 8)
                corner.Parent = frame
                
                local textLabel = Instance.new("TextLabel")
                textLabel.Size = UDim2.new(1, 0, 1, 0)
                textLabel.BackgroundTransparency = 1
                textLabel.Text = "倒计时: --"
                textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                textLabel.TextSize = 18
                textLabel.Font = Enum.Font.Gotham
                textLabel.Parent = frame
                
                hasteClockUI.Enabled = false
            end
            
            local function updateTimerDisplay(timerText)
                if hasteClockUI and hasteClockUI:FindFirstChildOfClass("Frame") then
                    local frame = hasteClockUI:FindFirstChildOfClass("Frame")
                    local textLabel = frame:FindFirstChildOfClass("TextLabel")
                    
                    if textLabel then
                        textLabel.Text = "倒计时: " .. timerText
                    end
                end
            end
            
            local function getCurrentRoomTimer()
                local Players = game:GetService("Players")
                local localPlayer = Players.LocalPlayer
                
                if not localPlayer then return nil end
                
                local currentRoom = localPlayer:GetAttribute("CurrentRoom")
                if not currentRoom then return nil end
                
                local roomKey = tostring(currentRoom)
                local currentRooms = workspace:FindFirstChild("CurrentRooms")
                
                if not currentRooms then return nil end
                
                local room = currentRooms:FindFirstChild(roomKey)
                if not room then return nil end
                
                local door = room:FindFirstChild("Door")
                if not door then return nil end
                
                local displayTimer = door:FindFirstChild("DisplayTimer")
                if not displayTimer then return nil end
                
                return displayTimer.Text.Text
            end
            
            hasteClockConnection = game:GetService("RunService").Heartbeat:Connect(function()
                if not Toggles.HasteClock.Value then
                    return
                end
                
                local timerText = getCurrentRoomTimer()
                
                if timerText and timerText ~= "" and timerText ~= "..." then
                    hasteClockUI.Enabled = true
                    updateTimerDisplay(timerText)
                else
                    hasteClockUI.Enabled = false
                end
            end)
            
            local Players = game:GetService("Players")
            local localPlayer = Players.LocalPlayer
            
            hasteClockRoomConnection = localPlayer:GetAttributeChangedSignal("CurrentRoom"):Connect(function()
                if not Toggles.HasteClock.Value then return end
                
                hasteClockUI.Enabled = true
                updateTimerDisplay("...")
                
                task.delay(2, function()
                    if Toggles.HasteClock.Value then
                        local timerText = getCurrentRoomTimer()
                        if not timerText or timerText == "" or timerText == "..." then
                            hasteClockUI.Enabled = false
                        end
                    end
                end)
            end)
            
        else
            if hasteClockConnection then
                hasteClockConnection:Disconnect()
                hasteClockConnection = nil
            end
            
            if hasteClockRoomConnection then
                hasteClockRoomConnection:Disconnect()
                hasteClockRoomConnection = nil
            end
            
            if hasteClockUI then
                hasteClockUI.Enabled = false
            end
        end
    end
})


Automation:AddDivider()
local Breaker = nil
Automation:AddToggle('AutoBreakerBox',{
Text = "自动断路器箱",
Default = false,
Callback = function(Value)
if Value then
for _, v in ipairs(workspace.CurrentRooms:GetDescendants()) do
if v.Name == "ElevatorBreaker" then
Breaker = v
     end
end
 
while task.wait() do
if not Toggles.AutoBreakerBox.Value then break end
if Breaker then
for _, v in ipairs(Breaker:GetChildren()) do
if v.Name == "BreakerSwitch" then
if v:GetAttribute("ID") == tonumber(Breaker:WaitForChild("SurfaceGui").Frame.Code.Text) then
if  Breaker:WaitForChild("SurfaceGui").Frame.Code.Frame.BackgroundTransparency == 0  then

v:SetAttribute("Enabled",true)
if v:WaitForChild("Sound").Playing == false then
v:WaitForChild("Sound",1e1).Playing = true
end
v.Material = Enum.Material.Neon
v:WaitForChild("Light",1e1).Attachment.Spark:Emit(1)
v:WaitForChild("PrismaticConstraint").TargetPosition = -0.2
else

v:SetAttribute("Enabled",false)
if v:WaitForChild("Sound").Playing == false then
v:WaitForChild("Sound",1e1).Playing = true
end
v:WaitForChild("PrismaticConstraint").TargetPosition = 0.2
v.Material = Enum.Material.Glass
end
end
end
end
end
end
end
end
})

local EntitysTable = {
RushMoving = 85,
BackdoorRush = 85,
AmbushMoving = 144,
GlitchRush = 120,
GlitchAmbush = 155,
A60 = 130,
A120 = 75
}

Automation:AddToggle('AutoCloset',{
     Text = "自动躲藏",
     Default = false,
     Risky = true
}):AddKeyPicker('AutoClosetKeybind', {


		Default = 'Q',
		SyncToggleState = true,
		Mode = 'Toggle',
		Text = '自动躲藏',
		NoUI = false,
		Callback = function(Value)
		end,
		ChangedCallback = function(New)
		end
	})

local autoGlitchEnabled = false
local autoGlitchConnection = nil

Automation:AddToggle('AutoGlitch', {
    Text = "自动故障",
    Default = false,
    Callback = function(Value)
        autoGlitchEnabled = Value
        
        if autoGlitchEnabled then
            autoGlitchConnection = RunService.Heartbeat:Connect(function()
                if autoGlitchEnabled and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    local character = LocalPlayer.Character
                    local humanoidRootPart = character.HumanoidRootPart
                    
                    local lookVector = humanoidRootPart.CFrame.LookVector
                    
                    local teleportPosition = humanoidRootPart.Position + (lookVector * 10000)
                    
                    character:PivotTo(CFrame.new(teleportPosition))
                end
            end)
        else
            if autoGlitchConnection then
                autoGlitchConnection:Disconnect()
                autoGlitchConnection = nil
            end
        end
    end
})

Movement:AddToggle('Noacceleration',{
     Text = "无打滑",
     Default = false
})
Movement:AddDivider()
Movement:AddToggle('NoClosetExitDelay',{
     Text = "无出柜延迟",
     Default = false
})
Movement:AddDivider()
Fly = Fly or {}
	Fly.Enabled = false
	Fly.Speed = 15
	Fly.FlyBody = nil
	Fly.FlyGyro = nil


	local renderConn 
	local charAddedConn = nil
	function Fly.SetupBodies(char)
		local root = char:FindFirstChild("HumanoidRootPart")
		if not root then return end
		local bv = Instance.new("BodyVelocity")
		bv.Name = "FlyBodyVelocity"
		bv.MaxForce = Vector3.new(9e99, 9e99, 9e99)
		bv.Velocity = Vector3.zero
		bv.Parent = root
		Fly.FlyBody = bv
		local bg = Instance.new("BodyGyro")
		bg.Name = "FlyBodyGyro"
		bg.MaxTorque = Vector3.new(9e9, 9e9, 9e9)
		local cam = workspace.CurrentCamera
		if cam then
			bg.CFrame = cam.CFrame
		end
		bg.Parent = root
		Fly.FlyGyro = bg

		local humanoid = char:FindFirstChild("Humanoid")
		if humanoid then
			humanoid.PlatformStand = true
		end
	end

	function Fly.CleanupBodies()
		if Fly.FlyBody then
			Fly.FlyBody:Destroy()
			Fly.FlyBody = nil
		end
		if Fly.FlyGyro then
			Fly.FlyGyro:Destroy()
			Fly.FlyGyro = nil
		end

		if Character then
			local humanoid = Character:FindFirstChild("Humanoid")
			if humanoid then
				humanoid.PlatformStand = false
			end
		end
	end

	local function onRenderStepped()
		if not Fly.Enabled then return end

		local char = Character
		if not char then return end

		local humanoid = char:FindFirstChild("Humanoid")
		local root = char:FindFirstChild("HumanoidRootPart")
		local cam = workspace.CurrentCamera
		if not humanoid or not root or not Fly.FlyBody or not Fly.FlyGyro or not cam then
			return
		end

		local dir = Vector3.zero

		if UserInputService.KeyboardEnabled then
			local forward = UserInputService:IsKeyDown(Enum.KeyCode.W)
			local back    = UserInputService:IsKeyDown(Enum.KeyCode.S)
			local left    = UserInputService:IsKeyDown(Enum.KeyCode.A)
			local right   = UserInputService:IsKeyDown(Enum.KeyCode.D)

			local camCFrame = cam.CFrame
			local lookVec = camCFrame.LookVector
			local rightVec = camCFrame.RightVector

			if forward then
				dir = dir + lookVec
			end
			if back then
				dir = dir - lookVec
			end
			if left then
				dir = dir - rightVec
			end
			if right then
				dir = dir + rightVec
			end
		else
			local moveDir = humanoid.MoveDirection
			if moveDir.Magnitude > 0 then
				local camCFrame = cam.CFrame
				local flatLook = Vector3.new(camCFrame.LookVector.X, 0, camCFrame.LookVector.Z)
				local flatRight = Vector3.new(camCFrame.RightVector.X, 0, camCFrame.RightVector.Z)
				if flatLook.Magnitude > 0 then
					flatLook = flatLook.Unit
				end
				if flatRight.Magnitude > 0 then
					flatRight = flatRight.Unit
				end

				local forwardWeight = moveDir:Dot(flatLook)
				local rightWeight = moveDir:Dot(flatRight)
				dir = camCFrame.LookVector * forwardWeight + camCFrame.RightVector * rightWeight
			end
		end

		if dir.Magnitude > 0 then
			Fly.FlyBody.Velocity = dir.Unit * Fly.Speed
		else
			Fly.FlyBody.Velocity = Vector3.zero
		end

		Fly.FlyGyro.CFrame = cam.CFrame

		humanoid.PlatformStand = true
	end

	function Fly.Enable()
		if Fly.Enabled then return end
		Fly.Enabled = true

		local char = Character 
		if char then
			Fly.SetupBodies(char)
		end

		if not renderConn then
			renderConn = RunService.RenderStepped:Connect(onRenderStepped)
		end

		if not charAddedConn then
			charAddedConn = player.CharacterAdded:Connect(function(char2)
				if Fly.Enabled then
					char2:WaitForChild("HumanoidRootPart")
					Fly.SetupBodies(char2)
				end
			end)
		end
	end

	function Fly.Disable()
		if not Fly.Enabled then return end
		Fly.Enabled = false

		Fly.CleanupBodies()

		if renderConn then
			renderConn:Disconnect()
			renderConn = nil
		end

		if charAddedConn then
			charAddedConn:Disconnect()
			charAddedConn = nil
		end
	end

	function Fly.Toggle()
		if Fly.Enabled then
			Fly.Disable()
		else
			Fly.Enable()
		end
	end

	function Fly.SetSpeed(newSpeed)
		Fly.Speed = newSpeed or Fly.Speed
	end

	FlySpeed = Movement:AddSlider("FlySpeed", {
		Text = "飞行速度",
		Min = 10,
		Max = 21,
		Default = Fly.Speed,
		Rounding = 0,
		Callback = function(v)
			Fly.SetSpeed(v)
		end
	})

	Movement:AddToggle("Fly", {
		Text = "飞行",
		Default = false,
		Callback = function(enabled)
			if enabled then
				Fly.Enable()
			else
				Fly.Disable()
			end
		end
	}):AddKeyPicker('Fly Keybind', {


		Default = 'F', 
		SyncToggleState = true,
		Mode = 'Toggle',
		Text = '飞行',
		NoUI = false,
		Callback = function(Value)
		end,
		ChangedCallback = function(New)
		end
	})

local FOVhandler = {mem={o=nil,r=nil,u=nil,base={}}, loop=false, cam=nil}

local function FOVstep()
local parent = LocalPlayer.PlayerGui
if not parent then return end
    
FOVhandler.mem.o = (FOVhandler.mem.o and FOVhandler.mem.o.Parent) and FOVhandler.mem.o or Instance.new("NumberValue", parent)
    
local o = FOVhandler.mem.o.Value or 0
local sum = 0
for i=1,#FOVhandler.mem.base do
local v = FOVhandler.mem.base[i]
if not v or not v.Parent then 
v = Instance.new("NumberValue", parent)
FOVhandler.mem.base[i] = v 
end
sum = sum + (v.Value or 0)
end
local target = (o ~= 0 and o) or sum
local cam = workspace.CurrentCamera
if not cam then return end

if cam ~= FOVhandler.cam then
FOVhandler.cam = cam
end

if FOVhandler.loop and target > 0 then
local vis = math.clamp(target, 25, 120)
if cam.FieldOfView ~= vis then 
cam.FieldOfView = vis 
end
end
end

pcall(function() RunService:UnbindFromRenderStep("FOV_SYS") end)
RunService:BindToRenderStep("FOV_SYS", Enum.RenderPriority.Camera.Value+1, FOVstep)

workspace:GetPropertyChangedSignal("CurrentCamera"):Connect(function()
FOVhandler.cam = workspace.CurrentCamera
end)

local View = 70
Camera:AddSlider("FieldofViewAdjust", {
    Text = "视野滑块",
    Default = 70,
    Min = 70,
    Max = 120,
    Rounding = 1,
    Compact = false,
    Callback = function(Value)
View = Value
if not FOVhandler.mem.base[1] then
FOVhandler.mem.base[1] = Instance.new("NumberValue", LocalPlayer.PlayerGui)
end
FOVhandler.mem.base[1].Value = Value
if Toggles.Fieldofview.Value then
local cam = workspace.CurrentCamera
if cam then
local vis = math.clamp(Value, 25, 120)
cam.FieldOfView = vis
end
end
end
})

Camera:AddToggle('Fieldofview', {
    Text = "视野",
    Default = false,
    Callback = function(Value)
if Value then
FOVhandler.loop = true
if not FOVhandler.mem.base[1] then
FOVhandler.mem.base[1] = Instance.new("NumberValue", LocalPlayer.PlayerGui)
end
FOVhandler.mem.base[1].Value = View
local cam = workspace.CurrentCamera
if cam then
local vis = math.clamp(View, 25, 120)
cam.FieldOfView = vis
end
else
FOVhandler.loop = false
if FOVhandler.mem.base[1] then
FOVhandler.mem.base[1].Value = 0
end
end
end
})
Anti:AddToggle('AntiDread',{
     Text = "防 Dread",
     Default = false,
Callback = function(Value)
local Dread = Modules:FindFirstChild("Dread") or Modules:FindFirstChild("_Dread")
if Dread then
Dread.Name = Value and "_Dread" or "Dread"

end
end
})

Anti:AddToggle('AntiScreech',{
     Text = "防 Screech",
     Default = false,
Callback = function(Value)
local Screech = Modules:FindFirstChild("Screech") or Modules:FindFirstChild("_Screech")
Screech.Name = Value and "_Screech" or "Screech"


end
})


Anti:AddToggle('AntiA90',{
     Text = "防 A90",
     Default = false,
Callback = function(Value)
local A90 = Modules:FindFirstChild("A90") or Modules:FindFirstChild("_A90")
if A90 then
A90.Name = Value and "_A90" or "A90"

end
end
})

Anti:AddToggle('AntiEyes',{
     Text = "防 Eyes",
     Default = false
})


Anti:AddToggle('AntiSnare',{
     Text = "防 Snare",
     Default = false,
      Callback = function(Value)
if Value then
for _, v in ipairs(workspace.CurrentRooms:GetDescendants()) do
if v.Name == "Snare" and v.Parent and v.Parent.Name ~= "Snare" then
v:WaitForChild("Hitbox").CanTouch = false
end
end
else
for _, v in ipairs(workspace.CurrentRooms:GetDescendants()) do
if v.Name == "Snare" and v.Parent and v.Parent.Name ~= "Snare" then
v:WaitForChild("Hitbox").CanTouch = true
end
end

end
end
})

Anti:AddToggle('AntiDupe',{
     Text = "防 Dupe",
     Default = false,
Callback = function(Value)
if Value then
for _, v in ipairs(workspace.CurrentRooms:GetDescendants()) do
if v.Name == "DoorFake" then
v:WaitForChild("Hidden").CanTouch = false
if v:FindFirstChild("Lock") then
v:FindFirstChild("Lock"):FindFirstChildOfClass("ProximityPrompt").ClickablePrompt = false
end
end
end
else
for _, v in ipairs(workspace.CurrentRooms:GetDescendants()) do
if v.Name == "DoorFake" then
v:WaitForChild("Hidden").CanTouch = false
if v:FindFirstChild("Lock") then
v:FindFirstChild("Lock"):FindFirstChildOfClass("ProximityPrompt").ClickablePrompt = false
end
end
end
end

end
})
 

Anti:AddToggle('AntiHear',{
     Text = "防飞哥听力",
     Default = false
})
Toggles.AntiHear:OnChanged(function(Value)

if not Value then
RemoteFolder.Crouch:FireServer(false)
end

end)
Anti:AddToggle('AntiHalt',{
     Text = "防 Halt",
     Default = false,
Callback = function(Value)
local Halt = ClientModules.EntityModules:FindFirstChild("Shade") or
ClientModules.EntityModules:FindFirstChild("_Shade") 
Halt.Name = Value and "_Shade" or "Shade"
end
})


local nothitted = false


local direction = Vector3.new(0, -50, 0)
task.spawn(function()

while task.wait(0.35) do
if LocalPlayer.Character and not Library.Unloaded then 
local origin = LocalPlayer.Character.HumanoidRootPart.Position
local result = workspace:Raycast(origin, direction, raycastParms)
if result then
nothitted = false

else

nothitted = true

end

end

end


end)


local SpeedBypassInterval = 0.216

if ReplicatedStorage:FindFirstChild("RemotesFolder") then
Bypass:AddToggle('SpeedBypass',{
     Text = "速度绕过",
     Default = false,
Callback = function(Value)
Options.SpeedBoostSlider:SetMax(Value and 100 or 21)
Options.SpeedBoostSlider:SetValue(Value and Options.SpeedBoostSlider.Value or 21)
Options.FlySpeed:SetMax(Value and 100 or 21)
Options.FlySpeed:SetValue(Value and Options.FlySpeed.Value or 21)

while true do
    task.wait(SpeedBypassInterval)
    if alive then
        local CollisionClon = LocalPlayer.Character:WaitForChild("_CollisionPart")
        local CollisionClon2 = LocalPlayer.Character:WaitForChild("_CollisionPart2")
        
        if not Toggles.SpeedBypass.Value or Library.Unloaded then
            CollisionClon.Massless = true
            CollisionClon2.Massless = true
            break 
        end
        
        if Character.CollisionPart.Anchored or nothitted or Toggles.AnticheatManipulation and Toggles.AnticheatManipulation.Value then
            CollisionClon.Massless = true
            CollisionClon2.Massless = true
            task.wait(0.35)
        else
            CollisionClon.Massless = true
            CollisionClon2.Massless = true
            task.wait(SpeedBypassInterval)
            CollisionClon2.Massless = false
            CollisionClon.Massless = false
        end
    end
end
end,
})
end
if not ReplicatedStorage:FindFirstChild("RemotesFolder") then


Options.SpeedBoostSlider:SetMax(115)
Options.FlySpeed:SetMax(115)
end

Bypass:AddSlider("SpeedBypassInterval", {
    Text = "速度绕过间隔",
    Default = 0.216,
    Min = 0.200,
    Max = 0.230,
    Rounding = 3,
    Compact = true,
    Callback = function(Value)
        SpeedBypassInterval = Value
    end,
})

Bypass:AddDivider()
if  ReplicatedStorage:FindFirstChild("RemotesFolder") then 

Bypass:AddDropdown("GMDropdown", {
        Values = { "自动","切换"},
        Default = 2,
        Multi = false,

        Text = "上帝模式列表",
        

        Callback = function(Value)
               
        end,

        
})

Bypass:AddToggle('GodMode',{
     Text = "上帝模式",
     Default = false,
     Callback = function(Value)

if Value then
if not Toggles.AntiHear.Value then
Toggles.AntiHear:SetValue(true)
Library:Notify("自动开启防飞哥听力功能只有这样上帝模式才能工作",3)
end



Character.Collision.Size = Vector3.new(1, 0.001, 5)

Character.Humanoid.HipHeight = 0.0001

else
LocalPlayer.Character.HumanoidRootPart.CFrame = LocalPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(0, 3, 0)
Character.Collision.Size = Vector3.new(5.5, 3, 5)

Character.Humanoid.HipHeight = 2.4



end



end
}):AddKeyPicker('GodmodeKeybind', {


		Default = 'G', 
		SyncToggleState = true,
		Mode = 'Toggle',
		Text = '上帝模式',
		NoUI = false,
		Callback = function(Value)
		end,
		ChangedCallback = function(New)
		end
	})


Bypass:AddDropdown("AnticheatManipulationMode", {
    Values = {"瞬移", "坐标", "移动"},
    Default = "瞬移",
    Multi = false,
    Text = "纵轴穿墙模式",
    Callback = function(Value)
        if Toggles.AnticheatManipulation and Toggles.AnticheatManipulation.Value then
            Toggles.AnticheatManipulation:SetValue(false)
            task.wait(0.1)
            Toggles.AnticheatManipulation:SetValue(true)
        end
    end,
})

local AnticheatManipulationLoop = nil
local AnticheatManipulationOrigin = nil
local AnticheatManipulationEnabled = false
local OriginalNoclipState = false

Bypass:AddToggle('AnticheatManipulation',{
     Text = "纵轴穿墙",
     Default = false,
     Callback = function(Value)
        if Value then
            AnticheatManipulationEnabled = true
            
            if Options.AnticheatManipulationMode and Options.AnticheatManipulationMode.Value == "移动" then
                OriginalNoclipState = Toggles.Noclip and Toggles.Noclip.Value or false
                if Toggles.Noclip then
                    Toggles.Noclip:SetValue(true)
                end
            end
            
            AnticheatManipulationLoop = task.spawn(function()
                while AnticheatManipulationEnabled and Toggles.AnticheatManipulation.Value do
                    if alive then
                        local character = LocalPlayer.Character
                        local humanoidRootPart = character.HumanoidRootPart
                        local lookVector = humanoidRootPart.CFrame.LookVector
                        
                        if Options.AnticheatManipulationMode and Options.AnticheatManipulationMode.Value == "瞬移" then
                            if not AnticheatManipulationOrigin then
                                AnticheatManipulationOrigin = humanoidRootPart.Position
                            end
                            
                            local backwardPosition = humanoidRootPart.Position - lookVector * 10000
                            character:PivotTo(CFrame.new(backwardPosition))
                            task.wait(0.03)
                            
                            local forwardPosition = AnticheatManipulationOrigin + lookVector * 1
                            character:PivotTo(CFrame.new(forwardPosition))
                            
                            AnticheatManipulationOrigin = forwardPosition
                            task.wait(0.07)
                        elseif Options.AnticheatManipulationMode and Options.AnticheatManipulationMode.Value == "坐标" then
                            local backwardPosition = humanoidRootPart.Position - (lookVector * 10000)
                            character:PivotTo(CFrame.new(backwardPosition))
                            task.wait(0.07)
                        else
                            local forwardPosition = humanoidRootPart.Position + (lookVector * 0.012)
                            character:PivotTo(CFrame.new(forwardPosition))
                            task.wait()
                        end
                    else
                        task.wait()
                    end
                end
                
                if alive and AnticheatManipulationOrigin and Options.AnticheatManipulationMode and Options.AnticheatManipulationMode.Value == "瞬移" then
                    character:PivotTo(CFrame.new(AnticheatManipulationOrigin))
                end
            end)
        else
            AnticheatManipulationEnabled = false
            
            if AnticheatManipulationLoop then
                task.cancel(AnticheatManipulationLoop)
                AnticheatManipulationLoop = nil
            end
            
            if Options.AnticheatManipulationMode and Options.AnticheatManipulationMode.Value == "移动" and Toggles.Noclip then
                Toggles.Noclip:SetValue(OriginalNoclipState)
            end
            
            if alive and AnticheatManipulationOrigin and Options.AnticheatManipulationMode and Options.AnticheatManipulationMode.Value == "瞬移" then
                LocalPlayer.Character:PivotTo(CFrame.new(AnticheatManipulationOrigin))
            end
            
            AnticheatManipulationOrigin = nil
        end
     end
}):AddKeyPicker('AnticheatManipulationKeybind', {
    Default = 'H',
    SyncToggleState = true,
    Mode = 'Toggle',
    Text = '纵轴穿墙',
    NoUI = false,
    Callback = function(Value)
    end,
    ChangedCallback = function(New)
    end
})


FloorAnti:AddToggle('RankedAntiBanana',{
     Text = "防 Nanner 香蕉",
     Default = false,
Callback = function(Value)
for _, v in ipairs(workspace:GetChildren()) do
if v.Name == "NannerPeel"  then
v.CanTouch = not Value
v:WaitForChild("Hitbox",9e9).CanTouch = not Value
end
end
end
})

FakeSurge = Instance.new("RemoteEvent",ReplicatedStorage)
FakeSurge.Name = "SurgeRemote"

FloorAnti:AddToggle('AntiSurge',{
     Text = "防 Surge",
     Default = false,
    Callback = function(Value)
if Value then

ReplicatedStorage.RemotesFolder.SurgeRemote.Parent = ReplicatedStorage
FakeSurge.Parent = ReplicatedStorage.RemotesFolder

else

ReplicatedStorage.RemotesFolder.SurgeRemote.Parent = ReplicatedStorage.RemotesFolder
FakeSurge.Parent = ReplicatedStorage


end

end
})

if Floor.Value == "Hotel" then
    local noPuzzleDoorsRunning = false
    local noPuzzleDoorsConnection = nil
    
    FloorAnti:AddToggle('NoPuzzleDoors', {
        Text = "无谜题门",
        Default = false,
        Callback = function(Value)
            if Value then
                noPuzzleDoorsRunning = true
                
                for _, room in ipairs(workspace.CurrentRooms:GetChildren()) do
                    local movingDoor = room:FindFirstChild("MovingDoor", true)
                    if movingDoor then
                        movingDoor:Destroy()
                    end
                end
                
                noPuzzleDoorsConnection = RunService.Heartbeat:Connect(function()
                    if not noPuzzleDoorsRunning then return end
                    
                    for _, room in ipairs(workspace.CurrentRooms:GetChildren()) do
                        local movingDoor = room:FindFirstChild("MovingDoor", true)
                        if movingDoor then
                            movingDoor:Destroy()
                        end
                    end
                end)
                
                workspace.CurrentRooms.ChildAdded:Connect(function(room)
                    if not noPuzzleDoorsRunning then return end
                    task.wait(0.5)
                    
                    local movingDoor = room:FindFirstChild("MovingDoor", true)
                    if movingDoor then
                        movingDoor:Destroy()
                    end
                end)
                
            else
                noPuzzleDoorsRunning = false
                if noPuzzleDoorsConnection then
                    noPuzzleDoorsConnection:Disconnect()
                    noPuzzleDoorsConnection = nil
                end
            end
        end
    })
end

FloorAnti:AddDivider()


FloorAnti:AddToggle('AntiSeekObstructions',{
     Text = "防追逐障碍",
     Default = false,
Callback = function(Value)
for _, v in ipairs(workspace.CurrentRooms:GetDescendants()) do
if v.Name == "ChandelierObstruction" or v.Name == "Seek_Arm" then
for _, part in ipairs(v:GetChildren()) do
if part:IsA("BasePart") then part.CanTouch = not Value
end
end
end
end
end
})

if Floor.Value == "Mines" then

local PlayerGui = LocalPlayer.PlayerGui
    local MainUI = PlayerGui.MainUI
    

    local NotifyCodeValue = false

    FloorAnti:AddToggle("NotifyAnchorCode", {
        Text = "通知密码机密码",
        Default = false,
        Callback = function(enabled)
local AnchorHintFrame = MainUI:WaitForChild("AnchorHintFrame")
            NotifyCodeValue = enabled
            while NotifyCodeValue do
                task.wait(0.9)

                local foundAnchor = nil
                local anchorSignText = AnchorHintFrame.AnchorCode.Text
                local currentCode = AnchorHintFrame.Code.Text

                
                for _, v in ipairs(workspace.CurrentRooms:GetDescendants()) do
                    if v.Name == "MinesAnchor" and v.Sign.TextLabel.Text == anchorSignText then
                        foundAnchor = v
                        break
                    end
                end

                if not foundAnchor then
                    task.wait()
                end
if foundAnchor then
                local noteObj = foundAnchor:FindFirstChild("Note")
                if not noteObj then
                    Library:Notify(("锚 %s 密码是 %s"):format(foundAnchor.Sign.TextLabel.Text, currentCode), 3)
                else
                    local noteText = noteObj.SurfaceGui.TextLabel.Text
                    local change = tonumber(noteText) or 0
                    local newcode = ""

                    for i = 1, #currentCode do
                        local num = tonumber(currentCode:sub(i, i)) or 0
                        num = (num + change) % 10
                        newcode = newcode .. num
                    end

                    Library:Notify(("锚 %s 密码是 %s"):format(foundAnchor.Sign.TextLabel.Text, newcode), 1)
                end
            end
        end
end
    })

FloorAnti:AddToggle('DeleteFigure',{
     Text = "删除飞哥",
     Default = false,
Disabled = Disable2
})
FloorAnti:AddDivider()
local clones = {}
		local bridgeConns = {}

		local function makeBarrier(barrier)
			if barrier.Parent:FindFirstChild("AntiBridge") then return end
			local clone = barrier:Clone()
			clone.Name = "AntiBridge"
			clone.Size = Vector3.new(barrier.Size.X, barrier.Size.Y, 30)
			clone.Color = Color3.new(0,0,0.5)
			clone.CFrame = barrier.CFrame * CFrame.new(0, 0, -5)
			clone.Transparency = 0
			clone.Anchored = true
			clone.CanCollide = true
			clone.CanTouch = true
			clone.Parent = barrier.Parent
			table.insert(clones, clone)
		end

		local function processBridge(bridge)
			if bridge:FindFirstChild("AntiBridge") then return end
			for _, part in ipairs(bridge:GetChildren()) do
				if part.Name == "PlayerBarrier" and part.Size.Y == 2.75 and (part.Rotation.X % 180) == 0 then
					makeBarrier(part)
				end
			end
			local conn = bridge.ChildAdded:Connect(function(c)
				if c.Name == "PlayerBarrier" then
					makeBarrier(c)
				end
			end)
			table.insert(bridgeConns, conn)
		end

		FloorAnti:AddToggle("ABF", {
			Text = "防止桥坠毁",
			Default = false,
			Callback = function(on)
				for _, c in ipairs(bridgeConns) do c:Disconnect() end
				bridgeConns = {}
				for _, c in ipairs(clones) do if c and c.Parent then c:Destroy() end end
				clones = {}

				if not on then return end

				task.spawn(function()
					for _, room in ipairs(workspace.CurrentRooms:GetChildren()) do
						local parts = room:FindFirstChild("Parts")
						if parts then
							for _, obj in ipairs(parts:GetChildren()) do
								if obj.Name == "Bridge" then
									processBridge(obj)
								end
							end
							local conn = parts.ChildAdded:Connect(function(c)
								if c.Name == "Bridge" then
									processBridge(c)
								end
							end)
							table.insert(bridgeConns, conn)
						end
					end
				end)

				local roomConn = workspace.CurrentRooms.ChildAdded:Connect(function(room)
					task.defer(function()
						local parts = room:WaitForChild("Parts", 3)
						if parts then
							for _, obj in ipairs(parts:GetChildren()) do
								if obj.Name == "Bridge" then
									processBridge(obj)
								end
							end
							local conn = parts.ChildAdded:Connect(function(c)
								if c.Name == "Bridge" then
									processBridge(c)
								end
							end)
							table.insert(bridgeConns, conn)
						end
					end)
				end)
				table.insert(bridgeConns, roomConn)
			end
		})

function showpath(part)
    if part.Name == "SeekGuidingLight" and Toggles.ShowSeekPath and Toggles.ShowSeekPath.Value then
        local Part = Instance.new("Part", Pathnode)
        Part.Name = "ShowPath"
        Part.Position = part.Position
        Part.Size = Vector3.new(2, 2, 2)
        Part.Shape = Enum.PartType.Ball
        Part.Color = Color3.new(0, 1, 0)
        Part.Material = Enum.Material.Neon
        Part.Anchored = true
        Part.CanCollide = false
        Part.CanTouch = false
        Part.CanQuery = true
        Debris:AddItem(Part, 150)
        
        local nextLight = findNextSeekGuidingLight(part)
        if nextLight then
            for i = 1, 5 do
                local t = i / 6
                local interpPos = part.Position:Lerp(nextLight.Position, t)
                
                local smallPart = Instance.new("Part", Pathnode)
                smallPart.Name = "ShowPath"
                smallPart.Position = interpPos
                smallPart.Size = Vector3.new(2, 2, 2)
                smallPart.Shape = Enum.PartType.Ball
                smallPart.Color = Color3.new(0, 1, 0)
                smallPart.Material = Enum.Material.Neon
                smallPart.Anchored = true
                smallPart.CanCollide = false
                smallPart.CanTouch = false
                smallPart.CanQuery = true
                Debris:AddItem(smallPart, 150)
            end
        end
    end
end

local function findNextSeekGuidingLight(currentLight)
    local allLights = {}
    for _, v in ipairs(workspace:GetDescendants()) do
        if v.Name == "SeekGuidingLight" then
            table.insert(allLights, v)
        end
    end
    
    table.sort(allLights, function(a, b)
        return a.Position.X < b.Position.X or 
               (a.Position.X == b.Position.X and a.Position.Z < b.Position.Z)
    end)
    
    for i, light in ipairs(allLights) do
        if light == currentLight and i < #allLights then
            return allLights[i + 1]
        end
    end
    
    return nil
end

FloorAnti:AddToggle("ShowSeekPath", {
    Text = "显示追逐战路径",
    Default = false,
    Callback = function(Value)
        if Value then
            for _, v in ipairs(workspace:GetDescendants()) do
                showpath(v)
            end
        else
            Pathnode:ClearAllChildren()
        end
    end
})



FloorAnti:AddToggle('AnticheatBypass',{
     Text = "绕过反作弊",
     Default = false
})
Toggles.AnticheatBypass:OnChanged(function(Value)
if not Value then

RemoteFolder.ClimbLadder:FireServer()

end
if Value then

Library:Notify("爬上梯子绕过反作弊",9)

end

end)

LocalPlayer.Character:GetAttributeChangedSignal("Climbing"):Connect(function()
if LocalPlayer.Character:GetAttribute("Climbing") == true then
if Toggles.AnticheatBypass.Value then 
task.wait(0.4)
LocalPlayer.Character:SetAttribute("Climbing",false)
Library:Notify("绕过成功，过场动画和Halt会破坏绕过",7)
end

end


end)

end

if Floor.Value == "Mines" then
    local autoAnchorRunning = false
    local autoAnchorConnection = nil
    
    Automation:AddToggle('AutoAnchorSolver', {
        Text = "自动密码机",
        Default = false,
        Callback = function(Value)
            if Value then
                autoAnchorRunning = true
                
                local function getMainUI()
                    local playerGui = LocalPlayer:WaitForChild("PlayerGui")
                    return playerGui:WaitForChild("MainUI")
                end
                
                local function solveAnchor()
                    if not autoAnchorRunning then return end
                    
                    local success, mainUI = pcall(getMainUI)
                    if not success or not mainUI then
                        return
                    end
                    
                    local AnchorHintFrame = mainUI:FindFirstChild("AnchorHintFrame")
                    if not AnchorHintFrame then
                        return
                    end
                    
                    local anchorSignText = AnchorHintFrame:FindFirstChild("AnchorCode")
                    local currentCode = AnchorHintFrame:FindFirstChild("Code")
                    
                    if not anchorSignText or not currentCode then
                        return
                    end
                    
                    local signText = anchorSignText.Text
                    local codeText = currentCode.Text
                    
                    if signText == "" or codeText == "" then
                        return
                    end
                    
                    local room50 = workspace.CurrentRooms:FindFirstChild("50")
                    if not room50 then 
                        for roomName, room in pairs(workspace.CurrentRooms:GetChildren()) do
                            if tonumber(roomName) and tonumber(roomName) >= 50 then
                                room50 = room
                                break
                            end
                        end
                        if not room50 then return end
                    end
                    
                    for _, anchor in ipairs(room50:GetDescendants()) do
                        if not autoAnchorRunning then break end
                        if anchor.Name == "MinesAnchor" then
                            local sign = anchor:FindFirstChild("Sign")
                            if sign then
                                local textLabel = sign:FindFirstChild("TextLabel")
                                if textLabel and textLabel.Text == signText then
                                    local anchorRemote = anchor:FindFirstChild("AnchorRemote")
                                    if anchorRemote then
                                        local success, err = pcall(function()
                                            anchorRemote:InvokeServer(codeText)
                                        end)
                                        if not success then
                                        end
                                    end
                                    break
                                end
                            end
                        end
                    end
                end
                
                autoAnchorConnection = game:GetService("RunService").Heartbeat:Connect(function()
                    if not autoAnchorRunning then return end
                    solveAnchor()
                end)
                
                
            else
                autoAnchorRunning = false
                if autoAnchorConnection then
                    autoAnchorConnection:Disconnect()
                    autoAnchorConnection = nil
                end
            end
        end
    })
end

if Floor.Value == "Mines" then
local minecartRenameActive = false
local minecartToggleEnabled = false
local minecartRoomCheckConnection = nil

FloorAnti:AddToggle('DeleteMinecart', {
Text = "删除矿车",
Default = false,
Callback = function(Value)
minecartToggleEnabled = Value

if Value then
local room46 = workspace.CurrentRooms:FindFirstChild("46")
if room46 then
performMinecartRename()
else
minecartRoomCheckConnection = workspace.CurrentRooms.ChildAdded:Connect(function(child)
if child.Name == "46" and minecartToggleEnabled then
task.wait(1)
performMinecartRename()
if minecartRoomCheckConnection then
minecartRoomCheckConnection:Disconnect()
minecartRoomCheckConnection = nil
end
end
end)
end
else
if minecartRoomCheckConnection then
minecartRoomCheckConnection:Disconnect()
minecartRoomCheckConnection = nil
end

if not minecartRenameActive then
else
Toggles.DeleteMinecart:SetValue(true)
end
end
end
})

function performMinecartRename()
if minecartRenameActive then
return
end

minecartRenameActive = true

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RemotesFolder = ReplicatedStorage:WaitForChild("RemotesFolder")

local remoteNames = {"MinecartResult"}

for _, name in ipairs(remoteNames) do
local remote = RemotesFolder:FindFirstChild(name)
if remote then
remote.Name = name .. " "
end
end

Library:Notify("删除矿车成功", 7)
Library:Notify("触发矿车过场动画后可绕过反作弊", 7)

Toggles.DeleteMinecart:SetValue(true)
end
    
if Toggles.DeleteMinecart and Toggles.DeleteMinecart.Value then
local room46 = workspace.CurrentRooms:FindFirstChild("46")
if room46 then
performMinecartRename()
end
end
end

if Floor.Value == "Mines" then
    FloorAnti:AddToggle('MinecartNoCollision', {
        Text = "矿车无碰撞",
        Default = false,
Callback = function(Value)
if Value then
for _, room in ipairs(workspace.CurrentRooms:GetChildren()) do
local assets = room:FindFirstChild("Assets")
if assets then
local minecartSet = assets:FindFirstChild("MinecartSet")
if minecartSet then
for _, child in ipairs(minecartSet:GetChildren()) do
local cart = child:FindFirstChild("Cart")
if cart and cart:IsA("BasePart") then
cart.CanCollide = false
end
end
end
end
end
                
if not minecartConnection then
minecartConnection = workspace.DescendantAdded:Connect(function(descendant)
if Toggles.MinecartNoCollision and Toggles.MinecartNoCollision.Value then
if descendant.Name == "Cart" and descendant:IsA("BasePart") then
local parent = descendant.Parent
if parent and parent.Parent and parent.Parent.Name == "MinecartSet" then
descendant.CanCollide = false
end
end
end
end)
end
else
for _, room in ipairs(workspace.CurrentRooms:GetChildren()) do
local assets = room:FindFirstChild("Assets")
if assets then
local minecartSet = assets:FindFirstChild("MinecartSet")
if minecartSet then
for _, child in ipairs(minecartSet:GetChildren()) do
local cart = child:FindFirstChild("Cart")
if cart and cart:IsA("BasePart") then
cart.CanCollide = true
end
end
end
end
end

if minecartConnection then
minecartConnection:Disconnect()
minecartConnection = nil
end
end
end
})
    
local minecartConnection = nil
end

local RankedAntiBananaConnection = nil

RankedAntiBananaConnection = workspace.ChildAdded:Connect(function(v)
if Toggles.RankedAntiBanana and Toggles.RankedAntiBanana.Value then
if v.Name == "NannerPeel"  then
v.CanTouch = false
v:WaitForChild("Hitbox",9e9).CanTouch = false
end
end
end)


ModifiersBox:AddToggle('AntiLookman',{
     Text = "防 Lookman",
     Default = false
})


local skyRemovalConnection = nil

ModifiersBox:AddToggle('AntiFog',{
Text = "没有雾",
Default = false,
Callback = function(Value)
if Value then
if Lighting:FindFirstChildOfClass("Sky") then
Lighting:FindFirstChildOfClass("Sky"):Destroy()
end

skyRemovalConnection = RunService.Heartbeat:Connect(function()
if not Toggles.AntiFog.Value then
return
end

local currentSky = Lighting:FindFirstChildOfClass("Sky")
if currentSky then
currentSky:Destroy()
end
end)
else
if skyRemovalConnection then
skyRemovalConnection:Disconnect()
skyRemovalConnection = nil
end
end
end
})

if Floor.Value == "Party" then
FloorAnti:AddToggle('AutoGetPowerUps',{
Text = "自动接通电源",
Default = false,
Callback = function(Value)

if Value then

for _, v in ipairs(workspace.CurrentRooms:GetDescendants()) do
if v.Name == "PowerupPad" then
v:WaitForChild("Hitbox",9e9).Size = Vector3.new(90, 90, 90)
end 
end
else 
for _, v in ipairs(workspace.CurrentRooms:GetDescendants()) do
if v.Name == "PowerupPad" then
v:WaitForChild("Hitbox",9e9).Size = Vector3.new(5, 5, 5)
end 
end
end

end
})
end




ModifiersBox:AddToggle('AntiGiggle',{
     Text = "防 Giggle",
     Default = false,
Callback = function(Value)
for _, v in ipairs(workspace.CurrentRooms:GetDescendants()) do
if v.Name == "GiggleCeiling" then
v:WaitForChild("Hitbox",9e9).CanTouch = not Value

end
end

end 
})

ModifiersBox:AddToggle('AntiJam',{
     Text = "防 Jamming",
     Default = false,
Callback = function(Value)

if Modifiers and not Modifiers:FindFirstChild("Jammin") then return end
local mainTrack = game["SoundService"]:FindFirstChild("Main")
if mainTrack then
local jamming = mainTrack:FindFirstChild("Jamming")
if jamming then
jamming.Enabled = not Value
end
end

local mainUI = LocalPlayer:FindFirstChild("PlayerGui")
and LocalPlayer.PlayerGui:FindFirstChild("MainUI")
if mainUI then
local healthGui = mainUI:FindFirstChild("Initiator")
and mainUI.Initiator:FindFirstChild("Main_Game")
and mainUI.Initiator.Main_Game:FindFirstChild("Health")
if healthGui then
local jamSound = healthGui:FindFirstChild("Jam")
if jamSound then
jamSound.Playing = not Value
end
end
end
end
})

ModifiersBox:AddToggle('AntiGloomPile',{
     Text = "防 Gloom Egg",
     Default = false,
Callback = function(Value)
for _, v in ipairs(workspace.CurrentRooms:GetDescendants()) do
if v.Name == "GloomEgg" then
 v:WaitForChild("Egg",9e9).CanTouch = not Value
end
end
end 
})

ModifiersBox:AddToggle('AntiVacuum',{
     Text = "防 Vacuum",
     Default = false,
Callback = function(Value)
for _, v in ipairs(workspace.CurrentRooms:GetDescendants()) do
if v.Name == "SideroomSpace" then
for _, part in ipairs(v:GetChildren()) do
if part:IsA("BasePart") then
part.CanTouch = not Value
part.CanCollide = Value
end
end
end
end
end 
})

ModifiersBox:AddToggle('NoBatDecor',{
     Text = "无蝙蝠装饰",
     Default = false,
Callback = function(Value)
if Value then
for _, decor in ipairs(workspace:GetDescendants()) do
if decor.Name == "HangingHalloweenDecor" and decor:IsA("Model") then
decor:Destroy()
end
end
             
if not batDecorConnection then
batDecorConnection = workspace.DescendantAdded:Connect(function(descendant)
if Toggles.NoBatDecor and Toggles.NoBatDecor.Value then
if descendant.Name == "HangingHalloweenDecor" and descendant:IsA("Model") then
descendant:Destroy()
end
end
end)
end
else
if batDecorConnection then
batDecorConnection:Disconnect()
batDecorConnection = nil
end
end
end
})

local batDecorConnection = nil


local function isPlayerOwnedItem(instance)
local current = instance
while current and current ~= workspace do
if current:IsA("Model") then
local player = Players:GetPlayerFromCharacter(current)
if player and player == LocalPlayer then
return true
end
if current:IsA("Tool") then
local owner = current:FindFirstChild("Owner")
if owner and owner.Value then
return true
end
local parent = current.Parent
if parent and (parent:IsA("Backpack") or (parent:IsA("Model") and Players:GetPlayerFromCharacter(parent))) then
return true
end
end
end
current = current.Parent
end
return false
end

function AddESP(inst, txt, color)
if isPlayerOwnedItem(inst) then
return
end
    
if not inst or not inst.Parent then return end
    
local model = inst
if inst:IsA("BasePart") and inst.Parent and inst.Parent:IsA("Model") then
model = inst.Parent
end
    
if inst.Name == "Door" and inst.Parent and inst.Parent.Name == "Door" then
model = inst
end
    
if isPlayerOwnedItem(model) then
return
end
    
if ESPObjects[model] then
ESPObjects[model]:Hide()
end
    
local espObject = ESPLibrary:Add({
Name = txt,
Model = model,
Color = color,
MaxDistance = 1000,
TextSize = ESPConfig.TextSize,
ESPType = ESPConfig.ESPType,
FillColor = color,
OutlineColor = color,
FillTransparency = ESPConfig.FillTransparency,
OutlineTransparency = ESPConfig.OutlineTransparency,
Tracer = { 
Enabled = ESPConfig.Tracer.Enabled,
Color = color,
From = ESPConfig.Tracer.Position
}
})
    
ESPObjects[model] = espObject
espObject:Show()
end

function ESPLibrary:AddESP(Part, Txt, Color)
if isPlayerOwnedItem(Part) then
return
end
    
if not Part or not Part.Parent then return end
    
local model = Part
if Part:IsA("BasePart") and Part.Parent and Part.Parent:IsA("Model") then
model = Part.Parent
end
    
if Part.Name == "Door" and Part.Parent and Part.Parent.Name == "Door" then
model = Part
end
    
if isPlayerOwnedItem(model) then
return
end
    
if ESPObjects[model] then
ESPObjects[model]:Hide()
end
    
local espObject = ESPLibrary:Add({
Name = Txt,
Model = model,
Color = Color,
MaxDistance = 1000,
TextSize = ESPConfig.TextSize,
ESPType = "Highlight",
FillColor = Color,
OutlineColor = Color,
FillTransparency = ESPConfig.FillTransparency,
OutlineTransparency = ESPConfig.OutlineTransparency,
Tracer = { 
Enabled = ESPConfig.Tracer.Enabled,
Color = Color,
From = ESPConfig.Tracer.Position
}
})
    
ESPObjects[model] = espObject
espObject:Show()
end


local DoorColor = Color3.new(0,1,1)
local KeyColor = Color3.new(0, 1, 0)
local GateLeverColor = Color3.new(0,1,0)
local TimerLeverColor = Color3.new(0,1,0)
local PlayersColor = Color3.new(1, 1, 1)
local EntityColor = Color3.new(1, 0, 0)
local GeneratorColor = Color3.new(0,1,0)
local HidingSpotColor = Color3.new(0,0.5,0)
local LeverColor = Color3.new(0,1,0)
local BooksColor = Color3.new(0,1,0)
local BreakerColor = Color3.new(0,1,0)
local ItemsColor = Color3.new(1,0,1)
local ChestColor = Color3.new(1, 0.8, 0)
local GoldColor = Color3.new(1, 0.8, 0)
local StardustColor = Color3.fromRGB(230, 116, 126)
local FuseColor = Color3.new(0,1,0)
local AnchorColor =  Color3.new(0,1,0)

ESP:AddToggle('Door',{
     Text = "门",
     Default = false,
Callback = function(Value)
if Value then
for _, room in ipairs(workspace.CurrentRooms:GetChildren()) do
local roomNumber = tonumber(room.Name)
if roomNumber and shouldShowESP(roomNumber) then
if room:FindFirstChild("Door") and room.Door:FindFirstChild("Door") then
local Door = room.Door.Door
if not Door:GetAttribute("Used") then
local displayText = "门 " .. Door.Parent:GetAttribute("RoomID")
local currentRoom = LocalPlayer:GetAttribute("CurrentRoom")
local isLocked = false
local isOpen = not Door.Anchored

if roomNumber == currentRoom then
if Door.Parent:FindFirstChild("Lock") then
isLocked = true
end
elseif roomNumber == currentRoom + 1 then
local keyFound = false
for _, obj in ipairs(room:GetDescendants()) do
if obj.Name == "KeyObtain" and not obj:GetAttribute("Used") then
keyFound = true
break
end
end
if keyFound then
isLocked = true
end
end

if isOpen then
displayText = "[已打开] " .. displayText
else
if isLocked then
displayText = "[锁定] " .. displayText
end
end

AddESP(Door, displayText, DoorColor)
end
end
end
end
else
for _, room in ipairs(workspace.CurrentRooms:GetChildren()) do
if room:FindFirstChild("Door") and room.Door:FindFirstChild("Door") then
ESPLibrary:RemoveESP(room.Door.Door)
end
end
end
end
}):AddColorPicker('DoorColo', {
	Default = DoorColor,
	Title = '门颜色',
	Transparency = 0,

Callback = function(Value)
DoorColor = Value
if Toggles.Door.Value then

Toggles.Door:SetValue(false)
Toggles.Door:SetValue(true)

end
end
})

FloorESP:AddToggle('TimerLever',{
     Text = "倒计时拉杆",
     Default = false,
Callback = function(Value)
if Value then
for _, room in ipairs(workspace.CurrentRooms:GetChildren()) do
local roomNumber = tonumber(room.Name)
if roomNumber and shouldShowESP(roomNumber) then
local v = room:FindFirstChild("TimerLever",true)
if v and v.Name == "TimerLever" then
AddESP(v,"倒计时拉杆",TimerLeverColor)
end
end
end
else
for _, room in ipairs(workspace.CurrentRooms:GetChildren()) do
local v = room:FindFirstChild("TimerLever",true)
if v and v.Name == "TimerLever" then
ESPLibrary:RemoveESP(v)
end
end
end
end
}):AddColorPicker('TimeLeverColo', {
	Default = TimerLeverColor,
	Title = '倒计时拉杆颜色',
	Transparency = 0,

Callback = function(Value)
TimerLeverColor = Value
if Toggles.TimerLever.Value then

Toggles.TimerLever:SetValue(false)
Toggles.TimerLever:SetValue(true)

end
end
})


FloorESP:AddDivider()

if Floor.Value == "Garden" then


FloorESP:AddToggle('LeverESP',{
     Text = "户外拉杆",
     Default = false,
Callback = function(Value)


if Value then


for _, v in ipairs(workspace.CurrentRooms[LocalPlayer:GetAttribute("CurrentRoom")]:GetDescendants()) do


if v and v.Parent and v.Parent.Name == "VineGuillotine" and v.Name == "Lever" then

AddESP(v,"户外拉杆",LeverColor)

end


end

else


for _, v in ipairs(workspace.CurrentRooms[LocalPlayer:GetAttribute("CurrentRoom")]:GetDescendants()) do


if v and v.Parent and v.Parent.Name == "VineGuillotine" and v.Name == "Lever" then

ESPLibrary:RemoveESP(v)

end


end


end

end
}):AddColorPicker('LeverColo', {
	Default = LeverColor,
	Title = '户外拉杆颜色',
	Transparency = 0,

Callback = function(Value)
LeverColor = Value
if Toggles.Lever.Value then

Toggles.Lever:SetValue(false)
Toggles.Lever:SetValue(true)

end
end
})

end



if Floor.Value == "Mines" then
FloorESP:AddToggle('Generator',{
     Text = "发电机",
     Default = false,
Callback = function(Value)
if Value then
for _, v in ipairs(workspace.CurrentRooms:GetDescendants()) do
if v.Name == "GeneratorMain" then
AddESP(v,"发电机",GeneratorColor)
end
end
else
for _, v in ipairs(workspace.CurrentRooms:GetDescendants()) do
if v.Name == "GeneratorMain" then
ESPLibrary:RemoveESP(v)

end
end
end
end
}):AddColorPicker('GeneratorColo', {
	Default = GeneratorColor,
	Title = '发电机颜色',
	Transparency = 0,

Callback = function(Value)
GeneratorColor = Value
if Toggles.Generator.Value then

Toggles.Generator:SetValue(false)
Toggles.Generator:SetValue(true)

end
end
})

FloorESP:AddToggle('Ladder',{
     Text = "梯子",
     Default = false,
Callback = function(Value)


for _, v in ipairs(workspace.CurrentRooms:GetDescendants()) do

if v.Name == "Ladder" then
AddESP(v,"梯子",Color3.new(0,0,1))
end

end

end
})

end

if Floor.Value == "Mines" then
FloorESP:AddToggle('Fuse',{
     Text = "保险丝",
     Default = false,
Callback = function(Value)
if Value then
for _, v in ipairs(workspace.CurrentRooms:GetDescendants()) do
if v.Name == "FuseObtain" then
AddESP(v,"保险丝",FuseColor)
end
end
else
for _, v in ipairs(workspace.CurrentRooms:GetDescendants()) do
if v.Name == "FuseObtain" then
ESPLibrary:RemoveESP(v)

end

end

end
end
}):AddColorPicker('FuseESP', {
	Default = FuseColor,
	Title = '保险丝颜色',
	Transparency = 0,

Callback = function(Value)
FuseColor = Value
if Toggles.Fuse.Value then

Toggles.Fuse:SetValue(false)
Toggles.Fuse:SetValue(true)

end
end
})

end
if Floor.Value == "Mines" then
FloorESP:AddToggle('Anchor',{
     Text = "锚",
     Default = false,
Callback = function(Value)
if Value then
for _, v in ipairs(workspace.CurrentRooms:GetDescendants()) do
if v.Name == "MinesAnchor" then
AddESP(v,"锚 " ..  v:WaitForChild("Sign").TextLabel.Text,AnchorColor)
end
end
else
for _, v in ipairs(workspace.CurrentRooms:GetDescendants()) do
if v.Name == "MinesAnchor" then
ESPLibrary:RemoveESP(v)
end
end

end
end
}):AddColorPicker('AnchorColo', {
	Default = AnchorColor,
	Title = '锚颜色',
	Transparency = 0,

Callback = function(Value)
AnchorColor = Value
if Toggles.Anchor.Value then

Toggles.Anchor:SetValue(false)
Toggles.Anchor:SetValue(true)

end
	end
})
FloorESP:AddToggle('WaterPump',{
     Text = "水泵",
     Default = false,
Callback = function(Value)
if Value then
for _, v in ipairs(workspace.CurrentRooms:GetDescendants()) do
if v.Name == "WaterPump" then
AddESP(v,"水泵",Color3.new(0,1,0))
end
end
end
end
})
end


ESP:AddToggle('Key',{
     Text = "钥匙",
     Default = false,
Callback = function(Value)
if Value then
for _, room in ipairs(workspace.CurrentRooms:GetChildren()) do
local roomNumber = tonumber(room.Name)
if roomNumber and shouldShowESP(roomNumber) then
local v = room:FindFirstChild("KeyObtain",true)
if v and not v:GetAttribute("Used") then
AddESP(v,"钥匙",KeyColor)
end
end
end
else
for _, room in ipairs(workspace.CurrentRooms:GetChildren()) do
local Key = room:FindFirstChild("KeyObtain",true)
if Key then
ESPLibrary:RemoveESP(Key)
end
end
end
end
}):AddColorPicker('KeyColo', {
	Default = KeyColor,
	Title = '钥匙颜色',
	Transparency = 0,

Callback = function(Value)
KeyColor = Value
if Toggles.Key.Value then

Toggles.Key:SetValue(false)
Toggles.Key:SetValue(true)

end
end
})
local HidingSpots = {
Wardrobe = "柜子",
Rooms_Locker = "柜子",
Backdoor_Wardrobe = "柜子",
Toolshed = "柜子",
Locker_Large = "柜子",
Bed = "床",
CircularVent = "通风口",
Rooms_Locker_Fridge = "冰箱",
RetroWardrobe = "柜子",
Dumpster = "垃圾桶",
Double_Bed = "床"
}

ESP:AddToggle('HidingSpot',{
     Text = "躲藏点",
     Default = false,
Callback = function(Value)
if Value then
for _, room in ipairs(workspace.CurrentRooms:GetChildren()) do
local roomNumber = tonumber(room.Name)
if roomNumber and shouldShowESP(roomNumber) then
local assets = room:FindFirstChild("Assets")
if assets then
for _, v in ipairs(assets:GetChildren()) do
local TextName = HidingSpots[v.Name]
if TextName and v.PrimaryPart then
AddESP(v,TextName,HidingSpotColor)
end
end
end
end
end
else
for _, room in ipairs(workspace.CurrentRooms:GetChildren()) do
local assets = room:FindFirstChild("Assets")
if assets then
for _, v in ipairs(assets:GetChildren()) do
local TextName = HidingSpots[v.Name]
if TextName and v.PrimaryPart then
ESPLibrary:RemoveESP(v)
end
end
end
end
end
end
}):AddColorPicker('HidingSpot', {
	Default = HidingSpotColor,
	Title = '躲藏点颜色',
	Transparency = 0,

Callback = function(Value)
HidingSpotColor = Value
if Toggles.HidingSpot.Value then

Toggles.HidingSpot:SetValue(false)
Toggles.HidingSpot:SetValue(true)

end
end
})

ESP:AddToggle('GateLever',{
     Text = "门拉杆",
     Default = false,
Callback = function(Value)
if Value then
for _, room in ipairs(workspace.CurrentRooms:GetChildren()) do
local roomNumber = tonumber(room.Name)
if roomNumber and shouldShowESP(roomNumber) then
for _, v in ipairs(room:GetDescendants()) do
if v.Name == "LeverForGate" then
AddESP(v,"门拉杆",GateLeverColor)
end
end
end
end
else
for _, room in ipairs(workspace.CurrentRooms:GetChildren()) do
local Lever = room:FindFirstChild("LeverForGate",true)
if Lever then 
ESPLibrary:RemoveESP(Lever)
end
end
end
end
}):AddColorPicker('GateLeverColo', {
	Default = GateLeverColor,
	Title = '门拉杆颜色',
	Transparency = 0,

Callback = function(Value)
GateLeverColor = Value
if Toggles.GateLever.Value then

Toggles.GateLever:SetValue(false)
Toggles.GateLever:SetValue(true)

end
end
})
ESP:AddToggle('Players',{
     Text = "玩家",
     Default = false,
Callback = function(Value)
if Value then
for _, plr in ipairs(Players:GetPlayers()) do
if plr ~= LocalPlayer and plr.Character then
AddESP(plr.Character,plr.Name,PlayersColor)

end
end
else
for _, plr in ipairs(Players:GetPlayers()) do
if plr ~= LocalPlayer and plr.Character then
ESPLibrary:RemoveESP(plr.Character)
end
end

end
end
}):AddColorPicker('PlayersColo', {
	Default = PlayersColor,
	Title = '玩家颜色',
	Transparency = 0,

Callback = function(Value)
PlayersColor = Value
if Toggles.Players.Value then

Toggles.Players:SetValue(false)
Toggles.Players:SetValue(true)

end
end
})

local PlayersConnection
for _, v in ipairs(Players:GetPlayers()) do
PlayersConnection = v.CharacterAdded:Connect(function()
for _, plr in ipairs(Players:GetPlayers()) do
if plr ~= LocalPlayer and plr.Character then
AddESP(plr.Character,plr.Name,PlayersColor)
end
end

end)
end


ESP:AddToggle('Books',{
     Text = "书",
     Default = false,
Callback = function(Value)
if Value then
for _, room in ipairs(workspace.CurrentRooms:GetChildren()) do
local roomNumber = tonumber(room.Name)
if roomNumber and shouldShowESP(roomNumber) then
for _, v in ipairs(room:GetDescendants()) do
if v.Name == "LiveHintBook" then
AddESP(v,"书",BooksColor)
end
end
end
end
else
for _, room in ipairs(workspace.CurrentRooms:GetChildren()) do
for _, v in ipairs(room:GetDescendants()) do
if v.Name == "LiveHintBook" then
ESPLibrary:RemoveESP(v)
end
end
end
end
end
}):AddColorPicker('BooksColo', {
	Default = BooksColor,
	Title = '书颜色',
	Transparency = 0,

Callback = function(Value)
BooksColor = Value
if Toggles.Books.Value then

Toggles.Books:SetValue(false)
Toggles.Books:SetValue(true)

end
end
})

ESP:AddToggle('Breaker',{
     Text = "断路器",
     Default = false,
Callback = function(Value)
if Value then
for _, room in ipairs(workspace.CurrentRooms:GetChildren()) do
local roomNumber = tonumber(room.Name)
if roomNumber and shouldShowESP(roomNumber) then
for _, v in ipairs(room:GetDescendants()) do
if v.Name == "LiveBreakerPolePickup" then
AddESP(v,"断路器",BreakerColor)
end
end
end
end
else
for _, room in ipairs(workspace.CurrentRooms:GetChildren()) do
for _, v in ipairs(room:GetDescendants()) do
if v.Name == "LiveBreakerPolePickup" then
ESPLibrary:RemoveESP(v)
end
end
end
end
end
}):AddColorPicker('BreakerColo', {
	Default = BreakerColor,
	Title = '断路器颜色',
	Transparency = 0,

Callback = function(Value)
BreakerColor = Value
if Toggles.Breaker.Value then

Toggles.Breaker:SetValue(false)
Toggles.Breaker:SetValue(true)

end
end
})

 Item = {
Flashlight = "手电筒",
Lockpick = "撬锁器",
Vitamins = "维生素",
Bandage = "创口贴",
StarVial = "小星瓶",
StarBottle = "星瓶",
StarJug = "星罐",
Shakelight = "手摇电筒",
Straplight = "背带灯",
Bulklight = "散装灯",
Battery = "电池",
Candle = "蜡烛",
Crucifix = "十字架",
CrucifixWall = "十字架",
Glowsticks = "荧光棒",
SkeletonKey = "骷髅钥匙",
Candy = "糖果",
ShieldMini = "迷你盾牌",
ShieldBig = "大盾牌",
BandagePack = "创口贴包装盒",
BatteryPack = "电池包装盒",
RiftCandle = "月光蜡烛",
LaserPointer = "激光笔",
HolyGrenade = "神圣手雷",
Shears = "剪刀",
Smoothie = "奶昔",
Cheese = "奶酪",
Bread = "面包",
AlarmClock = "闹钟",
RiftSmoothie = "月光奶昔",
GweenSoda = "苏打水",
GlitchCube = "故障方块",
RiftJar = "裂缝罐",
Compass = "罗盘",
Lantern = "手提灯",
Multitool = "万能工具",
Lotus = "莲花",
TipJar = "小费罐",
LotusPetalPickup = "莲花花瓣",
KeyIron = "铁钥匙",
CandyBag = "糖果袋子",
Donut = "甜甜圈"

}
ESP:AddToggle('Items',{
     Text = "物品",
     Default = false,
Callback = function(Value)
if Value then
for _, i in ipairs(workspace.CurrentRooms:GetDescendants()) do
local name = Item[i.Name]
if name and i.PrimaryPart then
AddESP(i,name,ItemsColor)

end
end
else
for _, i in ipairs(workspace.CurrentRooms:GetDescendants()) do
local name = Item[i.Name]
if name and i.PrimaryPart then
ESPLibrary:RemoveESP(i)
end
end

end
end
}):AddColorPicker('ItemsColo', {
	Default = ItemsColor,
	Title = '物品透视',
	Transparency = 0,

Callback = function(Value)
ItemsColor = Value
if Toggles.Items.Value then
Toggles.Items:SetValue(false)
Toggles.Items:SetValue(true)
end
end
})

ESP:AddToggle('Chest',{
     Text = "箱子",
     Default = false,
Callback = function(Value)
if Value then
for _, room in ipairs(workspace.CurrentRooms:GetChildren()) do
local roomNumber = tonumber(room.Name)
if roomNumber and shouldShowESP(roomNumber) then
for _, v in ipairs(room:GetDescendants()) do
if v.Name == "Toolshed_Small" or v.Name == "Chest_Vine" or v.Name == "ChestBoxLocked" or v.Name == "ChestBox" then
local displayText = "箱子"
if v.Name == "Chest_Vine" then
displayText = "[藤蔓] 箱子"
elseif v.Name == "ChestBoxLocked" then
displayText = "[锁定] 箱子"
elseif v.Name == "Toolshed_Small" then
displayText = "剪刀柜子"
end
AddESP(v, displayText, ChestColor)
end
end
end
end
else
for _, room in ipairs(workspace.CurrentRooms:GetChildren()) do
for _, v in ipairs(room:GetDescendants()) do
if v.Name == "Toolshed_Small" or v.Name == "Chest_Vine" or v.Name == "ChestBoxLocked" or v.Name == "ChestBox" then
ESPLibrary:RemoveESP(v)
end
end
end
end
end
}):AddColorPicker('ChestColo', {
	Default = ChestColor,
	Title = '箱子颜色',
	Transparency = 0,

Callback = function(Value)
ChestColor = Value
if Toggles.Chest.Value then
Toggles.Chest:SetValue(false)
Toggles.Chest:SetValue(true)
end
end
})

ESP:AddToggle('Gold',{
     Text = "金币",
     Default = false,
Callback = function(Value)
if Value then
for _, room in ipairs(workspace.CurrentRooms:GetChildren()) do
local roomNumber = tonumber(room.Name)
if roomNumber and shouldShowESP(roomNumber) then
for _, v in ipairs(room:GetDescendants()) do
if v and v.Name == "GoldPile" then
AddESP(v,"金币 " .. v:GetAttribute("GoldValue"),GoldColor)
end
end
end
end
else
for _, room in ipairs(workspace.CurrentRooms:GetChildren()) do
for _, v in ipairs(room:GetDescendants()) do
if v.Name == "GoldPile" then
ESPLibrary:RemoveESP(v)
end
end
end
end
end
}):AddColorPicker('GoldColor', {
	Default = GoldColor,
	Title = '金币颜色',
	Transparency = 0,

Callback = function(Value)
GoldColor = Value
if Toggles.Gold.Value then

Toggles.Gold:SetValue(false)
Toggles.Gold:SetValue(true)

end
end
})

ESP:AddToggle('Stardust',{
     Text = "星尘",
     Default = false,
Callback = function(Value)
if Value then
for _, room in ipairs(workspace.CurrentRooms:GetChildren()) do
local roomNumber = tonumber(room.Name)
if roomNumber and shouldShowESP(roomNumber) then
for _, v in ipairs(room:GetDescendants()) do
if v.Name == "StardustPickup" then
AddESP(v, "星尘", StardustColor)
end
end
end
end
else
for _, room in ipairs(workspace.CurrentRooms:GetChildren()) do
for _, v in ipairs(room:GetDescendants()) do
if v.Name == "StardustPickup" then
ESPLibrary:RemoveESP(v)
end
end
end
end
end
}):AddColorPicker('StardustColo', {
	Default = StardustColor,
	Title = '星尘颜色',
	Transparency = 0,

Callback = function(Value)
StardustColor = Value
if Toggles.Stardust.Value then
Toggles.Stardust:SetValue(false)
Toggles.Stardust:SetValue(true)
end
end
})

ESP:AddToggle('EntitesESP',{
     Text = "实体",
     Default = false
}):AddColorPicker('EntityColorPicker', {
	Default = EntityColor,
	Title = '实体颜色',
	Transparency = 0,
Callback = function(Value)
EntityColor = Value
if Toggles.EntitesESP.Value then
for _, entity in ipairs(workspace:GetChildren()) do
if entity:FindFirstChild("ESP_System") then
entity.ESP_System.FillColor = EntityColor
if entity:FindFirstChild("ESP_GUI") and entity.ESP_GUI:FindFirstChild("Txt") then
entity.ESP_GUI.Txt.TextColor3 = EntityColor
end
end
end
end
end
})

table.insert(Connections,UserInputService.JumpRequest:Connect(function()
task.wait(0.3)
if Toggles.InfiniteJump.Value then
if Character then

Character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)

end
end

end)
)

table.insert(Connections,LocalPlayer.CharacterAdded:Connect(function()
task.wait(2)
Library:Notify("设置所有",4)

if Toggles.EnableJump.Value then
LocalPlayer.Character:SetAttribute("CanJump",true)
end



if Toggles.Godmode.Value then

LocalPlayer.Character.Collision.Position = LocalPlayer.Character.Collision.Position - Vector3.new(0, 11, 0)


end
task.wait(3)
MainGame = LocalPlayer:WaitForChild("PlayerGui"):WaitForChild("MainUI"):WaitForChild("Initiator").Main_Game
 RequiredMainGame = require(LocalPlayer.PlayerGui.MainUI.Initiator.Main_Game)
 RemoteListener = MainGame.RemoteListener
 Modules = RemoteListener.Modules

if Toggles.AntiScreech.Value then

local Screech = Modules:FindFirstChild("Screech") or Modules:FindFirstChild("_Screech")
Screech.Name = "_Screech"


end

if Toggles.AntiA90.Value then

local A90 = Modules:FindFirstChild("A90") or Modules:FindFirstChild("_A90")
if A90 then
A90.Name =   "_A90"


end

end

end))
function addESP(entity,label)

local base 
while entity.PrimaryPart == nil do
base = entity:FindFirstChildWhichIsA("BasePart")
task.wait()
end
base = entity.PrimaryPart


if not entity:FindFirstChildOfClass("Humanoid") then
Instance.new("Humanoid",entity)
end
if base then
base.Transparency = 0.99
end
ESPLibrary:AddESP(entity,label,EntityColor)
end

Toggles.EntityNotifys:OnChanged(function(Value)

if Value then
for _, v in ipairs(workspace:GetChildren()) do
if v.Name == "RushMoving" and Options.EntitiesPicker.Value["Rush"] then
Library:Notify({
Title = "通知实体",
Description = "Rush 已生成",
Time = 3,
})
Sound()
end
if v.Name == "BackdoorRush" and Options.EntitiesPicker.Value["Blitz"] then
Library:Notify({
Title = "通知实体",
Description = "Blitz 已生成",
Time = 3,
})
Sound()
end

if v.Name == "AmbushMoving" and Options.EntitiesPicker.Value["Ambush"] then
Library:Notify({
Title = "通知实体",
Description = "Ambush 已生成",
Time = 3,
})
Sound()
end

if v.Name == "A60" and Options.EntitiesPicker.Value["A-60"] then
Library:Notify({
Title = "通知实体",
Description = "A-60 已生成",
Time = 3,
})
Sound()
end

if v.Name == "A120" and Options.EntitiesPicker.Value["A-120"] then
Library:Notify({
Title = "通知实体",
Description = "A-120 已生成",
Time = 3,
})
Sound()
end

if v.Name == "Eyes" and Options.EntitiesPicker.Value["Eyes"] then
Library:Notify({
Title = "通知实体",
Description = "Eyes 已生成",
Time = 3,
})
Sound()
end

if v.Name == "GlitchRush" and Options.EntitiesPicker.Value["GlitchRush"] then
Library:Notify({
Title = "通知实体",
Description = "GlitchRush 已生成",
Time = 3,
})
Sound()
end
if v.Name == "GlitchAmbush" and Options.EntitiesPicker.Value["GlitchAmbush"] then
Library:Notify({
Title = "通知实体",
Description = "'GlitchAmbush 已生成",
Time = 3,
})
Sound()
end

if v.Name == "Groundskeeper" and Options.EntitiesPicker.Value["Groundskeeper"] then
Library:Notify({
Title = "通知实体",
Description = "Groundskeeper 已生成",
Time = 3,
})
Sound()
end

if v.Name == "MonumentEntity" and Options.EntitiesPicker.Value["Monument"] then
Library:Notify({
Title = "通知实体",
Description = "Monuemt 已生成",
Time = 3,
})
Sound()
end

end
if Toggles.EntitesESP.Value then
if v.Name == "RushMoving" then
addESP(v,"Rush")
end

if v.Name == "AmbushMoving" then
addESP(v,"Ambush")
end

if v.Name == "A60" then
addESP(v,"A-60")
end

if v.Name == "A120" then
addESP(v,"A-120")
end

if v.Name == "Eyes" then
addESP(v,"Eyes")
end

if v.Name == "BackdoorLookman" then
addESP(v,"Lookman")
end

if v.Name == "Groundskeeper" then
addESP(v, "Groundskeeper")
end

if v.Name == "MonumentEntity" then
addESP(v:WaitForChild("Top"),"Monument")
end
end
end

end)

table.insert(Connections,workspace.ChildAdded:Connect(function(v)
if  Toggles.EntityNotifys.Value then  
if v.Name == "RushMoving" and Options.EntitiesPicker.Value["Rush"] then
Library:Notify({
Title = "通知实体",
Description = "Rush 已生成",
Time = 3,
})
Sound()
end
if v.Name == "BackdoorRush" and Options.EntitiesPicker.Value["Blitz"] then
Library:Notify({
Title = "通知实体",
Description = "Blitz 已生成",
Time = 3,
})
Sound()
end

if v.Name == "AmbushMoving" and Options.EntitiesPicker.Value["Ambush"] then
Library:Notify({
Title = "通知实体",
Description = "Ambush 已生成",
Time = 3,
})
Sound()
end

if v.Name == "A60" and Options.EntitiesPicker.Value["A-60"] then
Library:Notify({
Title = "通知实体",
Description = "A-60 已生成",
Time = 3,
})
Sound()
end

if v.Name == "A120" and Options.EntitiesPicker.Value["A-120"] then
Library:Notify({
Title = "通知实体",
Description = "A-120 已生成",
Time = 3,
})
Sound()
end

if v.Name == "Eyes" and Options.EntitiesPicker.Value["Eyes"] then
Library:Notify({
Title = "通知实体",
Description = "Eyes 已生成",
Time = 3,
})
Sound()
end

if v.Name == "GlitchRush" and Options.EntitiesPicker.Value["GlitchRush"] then
Library:Notify({
Title = "通知实体",
Description = "GlitchRush 已生成",
Time = 3,
})
Sound()
end
if v.Name == "GlitchAmbush" and Options.EntitiesPicker.Value["GlitchAmbush"] then
Library:Notify({
Title = "通知实体",
Description = "GlitchAmbush 已生成",
Time = 3,
})
Sound()
end

if v.Name == "Groundskeeper" and Options.EntitiesPicker.Value["Groundskeeper"] then
Library:Notify({
Title = "通知实体",
Description = "Groundskeeper 已生成",
Time = 3,
})
Sound()
end

if v.Name == "MonumentEntity" and Options.EntitiesPicker.Value["Monument"] then
Library:Notify({
Title = "通知实体",
Description = "Monument 已生成",
Time = 3,
})
Sound()
end

if v.Name == "SeekMovingNewClone" and Options.EntitiesPicker.Value["Seek"] then
Library:Notify({
Title = "通知实体",
Description = "Seek发射器 已生成",
Time = 3,
})
Sound()
end

end
if Toggles.EntitesESP.Value then
if v.Name == "RushMoving" then
addESP(v,"Rush")
end



if v.Name == "AmbushMoving" then
addESP(v,"Ambush")
end

if v.Name == "A60" then
addESP(v,"A-60")
end

if v.Name == "A120" then
addESP(v,"A-120")
end

if v.Name == "Eyes" then
addESP(v,"Eyes")
end

if v.Name == "BackdoorLookman" then
addESP(v,"Lookman")
end
if v.Name == "BackdoorRush" then
addESP(v,"Blitz")
end

if v.Name == "Groundskeeper" then
addESP(v, "Groundskeeper")
end

if v.Name == "MonumentEntity" then
addESP(v:WaitForChild("Top"),"Monument")
end

end

end)
)

Toggles.TransparencyCloset:OnChanged(function(Value)

if not Value then

for _, v in ipairs(workspace.CurrentRooms:GetDescendants()) do


if v:FindFirstChild("HidePrompt") then

for _, base in ipairs(v:GetChildren()) do


if base:IsA("BasePart") and not (base.Name == "PlayerCollision" or base.Name == "Collision") then


base.Transparency = 0 

end

end

end

end
end


end)

table.insert(Connections,Character:GetAttributeChangedSignal("Hiding"):Connect(function()
 Closet = nil
if Character:GetAttribute("Hiding") == true then
for _, v in ipairs(workspace.CurrentRooms[LocalPlayer:GetAttribute("CurrentRoom")]:GetDescendants()) do
if v:FindFirstChild("HidePrompt") then
if v:FindFirstChild("HiddenPlayer") and v.HiddenPlayer.Value ~= nil then
Closet = v


end
end
end


else
for _, v in ipairs(workspace.CurrentRooms[LocalPlayer:GetAttribute("CurrentRoom")]:GetDescendants()) do
if v:FindFirstChild("HidePrompt") then


for _, base in ipairs(v:GetChildren()) do
if base:IsA("BasePart") and not
(base.Name == "PlayerCollision" or base.Name == "Collision")  then
base.Transparency = 0

end

end


end
end
end

end)
)


print("RenderStepped")


table.insert(Connections,RunService.Heartbeat:Connect(function()
if alive then
if Toggles.AutoRooms and Toggles.AutoRooms.Value then

if ReplicatedStorage.GameData.LatestRoom.Value == 1000 then return end

if Toggles.AutoCloset.Value then
Toggles.AutoCloset:SetValue(false)
Library:Notify("禁用自动躲藏，使自动房间正常运行",4)

end
local entity2 = Workspace:FindFirstChild("A60") or Workspace:FindFirstChild("A120") or Workspace:FindFirstChild("GlitchRush") or Workspace:FindFirstChild("GlitchAmbush")

if entity2 and entity2.PrimaryPart and entity2.PrimaryPart.Position.Y > -6  then
local Locker = GetNearestLocker()

if Locker then

if not Locker:FindFirstChild("Hide") then
local Part = Instance.new("Part",Locker)
Part.Position = Locker.PrimaryPart.Position + Locker.PrimaryPart.CFrame.LookVector * 7
Part.Size = Vector3.new(1, 1, 1)
Part.CanCollide = false
Part.Transparency = 1
Part.Anchored = true
Part.Name = "Hide"
end

moveto(Locker:WaitForChild("Hide"))
if not LocalPlayer.Character.CollisionPart.Anchored then

fireproximityprompt(Locker:WaitForChild("HidePrompt"))
end

end

elseif not entity or entity.PrimaryPart.Position.Y < -9 then
LocalPlayer.Character:SetAttribute("Hiding",false)

moveto(workspace.CurrentRooms[game.ReplicatedStorage.GameData.LatestRoom.Value].Door.Door)

end

end

end 

end))

table.insert(Connections,RunService.RenderStepped:Connect(function()
alive = LocalPlayer:GetAttribute("Alive")
if alive then

if Toggles.Fullbright.Value then
Lighting.Ambient = Color3.fromRGB(255, 255, 255)

end


if Options.GMDropdown and Options.GMDropdown.Value == "自动" then

local Entitys = workspace:FindFirstChild("RushMoving") or workspace:FindFirstChild("AmbushMoving") or workspace:FindFirstChild("GlitchRush") or workspace:FindFirstChild("GlitchAmbush") or workspace:FindFirstChild("BackdoorRush")

if Entitys and not Toggles.GodMode.Value then
Toggles.GodMode:SetValue(true)
elseif not Entitys and Toggles.GodMode.Value then
Toggles.GodMode:SetValue(false)
end

end

if Toggles.TransparencyCloset.Value then

if Closet then
  
for _, v in ipairs(Closet:GetChildren()) do

if v:IsA("BasePart") and  not (v.Name == "PlayerCollision" or v.Name == "Collision") then

v.Transparency = TransparencyValue

end

end

end

end


if Toggles.SpeedBoost.Value then

Character.Humanoid.WalkSpeed = Speed
end

if Toggles.AutoCloset.Value then
local Closet = GetNearestCloset()
for _, v in ipairs(workspace:GetChildren()) do
local range = EntitysTable[v.Name]
if range and v.PrimaryPart then

if (LocalPlayer.Character.HumanoidRootPart.Position - v.PrimaryPart.Position).Magnitude <= range then 
if Closet then
if not LocalPlayer.Character.PrimaryPart.Anchored then
fireInteract(Closet:WaitForChild("HidePrompt"))
end
end
elseif (LocalPlayer.Character.HumanoidRootPart.Position - v.PrimaryPart.Position).Magnitude > range then 
LocalPlayer.Character:SetAttribute("Hiding",false)

if not v:GetAttribute("Destroying") then
v:SetAttribute("Destroying",true)
v.Destroying:Connect(function()
LocalPlayer.Character:SetAttribute("Hiding",false)
end)
end
end
end
end
end

if Toggles.Door and Toggles.Door.Value then
for _, room in ipairs(workspace.CurrentRooms:GetChildren()) do
local roomNumber = tonumber(room.Name)
if roomNumber and shouldShowESP(roomNumber) then
if room:FindFirstChild("Door") and room.Door:FindFirstChild("Door") then
local Door = room.Door.Door
if not Door:GetAttribute("Used") then
local espObject = ESPObjects[Door]
if espObject then
local displayText = "门 " .. Door.Parent:GetAttribute("RoomID")
local currentRoom = LocalPlayer:GetAttribute("CurrentRoom")
local isLocked = false
local isOpen = not Door.Anchored

if roomNumber == currentRoom then
if Door.Parent:FindFirstChild("Lock") then
isLocked = true
end
elseif roomNumber == currentRoom + 1 then
local keyFound = false
for _, obj in ipairs(room:GetDescendants()) do
if obj.Name == "KeyObtain" and not obj:GetAttribute("Used") then
keyFound = true
break
end
end
if keyFound then
isLocked = true
end
end

if isOpen then
displayText = "[已打开] " .. displayText
else
if isLocked then
displayText = "[锁定] " .. displayText
end
end

espObject.CurrentSettings.Name = displayText

if espObject.GUI and espObject.GUI.Txt then
espObject.GUI.Txt.Text = displayText
end
end
end
end
end
end
end

if Toggles.NoClosetExitDelay.Value then
if LocalPlayer.Character:GetAttribute("Hiding") == true then
if (Character.Humanoid.MoveDirection.Magnitude > 0.5)  then
RemoteFolder.CamLock:FireServer()
end
end
end 


if Toggles.NoCutscenes.Value then
if (ReplicatedStorage.GameData.LatestRoom.Value > 89) then

Toggles.NoCutscenes:SetValue(false)
end
end

if Toggles.InfiniteItems and Toggles.InfiniteItems.Value then
local hasTool = Character:FindFirstChild("Lockpick") or Character:FindFirstChild("SkeletonKey")
				if hasTool then

					for _, prompt in ipairs(InfStore) do
						if prompt and prompt.Parent and not prompt:GetAttribute("HasFake") == true then
							addFake(prompt, "Lockpick")
						end
					end

				end
			end
if Toggles.InfiniteSItems and Toggles.InfiniteSItems.Value then
local hasTool =  LocalPlayer.Character:FindFirstChild("Shears")
				if hasTool then

					for _, prompt in ipairs(InfSStore) do
						if prompt and prompt.Parent and not prompt:GetAttribute("HasFake") == true then
							addFake(prompt, "Shears")
						end
					end

				end
			end

if Toggles.Noacceleration.Value then
Character.HumanoidRootPart.CustomPhysicalProperties = PhysicalProperties.new(100,0.5,0.2)
Character.Collision.CustomPhysicalProperties = PhysicalProperties.new(100,0.5,0.2)
else
Character.HumanoidRootPart.CustomPhysicalProperties =  PhysicalProperties.new(0.4,0.2,0.2)
Character.Collision.CustomPhysicalProperties = PhysicalProperties.new(0.4,0.2,0.2)
end

if Toggles.AntiHear.Value and ReplicatedStorage:FindFirstChild("RemotesFolder") then
RemoteFolder.Crouch:FireServer(true)
end

if Toggles.Noclip.Value then
if alive then
LocalPlayer.Character.Collision.CanCollide = false
if LocalPlayer.Character.Collision:FindFirstChild("CollisionCrouch") then
LocalPlayer.Character.Collision.CollisionCrouch.CanCollide = false

end
if LocalPlayer.Character:FindFirstChild("CollisionPart")  then
LocalPlayer.Character:FindFirstChild("CollisionPart").CanCollide = false
end

LocalPlayer.Character.HumanoidRootPart.CanCollide = false
end
end
if Toggles.NoCameraShake.Value then
if alive then
RequiredMainGame.csgo = CFrame.new()
end
end
if  Toggles.DeleteFigure and Toggles.DeleteFigure.Value then
if alive then
local Figure = workspace.CurrentRooms:FindFirstChild("FigureRig",true)
if Figure and Figure:FindFirstChild("Root") and isnetworkowner(Figure.Root) then
if Figure:FindFirstChild("Root") then
Figure.Root.Size = Vector3.new(0.4, 2000, 0.4)
Figure.Root.CanCollide = false
Figure.Hitbox.CanCollide = false
end
end
end
end

if  Toggles.DeleteFigureFools and Toggles.DeleteFigureFools.Value then
if alive then
local Figure = workspace:FindFirstChild("FigureRagdoll",true)
if Figure and Figure:FindFirstChild("Root") and isnetworkowner(Figure.Root) then
if Figure:FindFirstChild("Root") then
Figure:PivotTo(Figure.Root.CFrame * CFrame.new(30, 900, 300))
Figure.Root.CanCollide = false
end
end
end
end


if Toggles.DoorReach.Value then
if alive then
local Door = workspace.CurrentRooms[ReplicatedStorage.GameData.LatestRoom.Value].Door
if Door and Door:FindFirstChild("ClientOpen") then
if (Character.HumanoidRootPart.Position - Door.Door.Position).Magnitude < Range then
Door.ClientOpen:FireServer()
end
end
end
end

if Toggles.AntiEyes.Value then
if alive then
if Workspace:FindFirstChild("Eyes") then
if RemoteFolder.Name == "Bricks" or RemoteFolder.Name == "EntityInfo" then
RemoteFolder.MotorReplication:FireServer(0, -100, 0, false)
else
RemoteFolder.MotorReplication:FireServer(-890)
end

end
end
end

if Toggles.SpectateEntity.Value then
if alive then
for _, entity in ipairs(workspace:GetChildren()) do
if SpectateTable[entity.Name] then
if entity.PrimaryPart then 
if Character:GetAttribute("Hiding") == true then
Workspace.Camera.CFrame = CFrame.lookAt(Workspace.CurrentCamera.CFrame.Position, entity.PrimaryPart.Position)
           end
      end
end
end
end
end

if Toggles.AntiLookman.Value then
if alive then
if Workspace:FindFirstChild("BackdoorLookman") then
RemoteFolder.MotorReplication:FireServer(-890)

end
end
end

if Toggles.TransparencyCart.Value then
if Workspace.CurrentCamera and Workspace.CurrentCamera:FindFirstChild("MinecartRig") then
for _, v in ipairs(workspace.CurrentCamera.MinecartRig:GetChildren()) do
if v:IsA("BasePart") then
v.Transparency = CartTransparencyValue


end
end

end
end
if Toggles.FigureGodmode then

local Figure = workspace:FindFirstChild("FigureRagdoll", true)
if Figure then
for _, v in Figure:GetChildren() do
if v:IsA("BasePart") then
v.CanTouch = not Toggles.FigureGodmode.Value
end
end

end

end

if Toggles.AutoInteract.Value then
    for _, prompt in ipairs(AutoInteractTable) do
        if prompt and prompt.Parent then
            local check = prompt:GetAttribute("Interactions")
            local isMinesGateButton = prompt.Parent and prompt.Parent.Name == "Button" and 
                                     prompt.Parent.Parent and prompt.Parent.Parent.Name == "MinesGateButton"
            local isFusesPrompt = prompt.Name == "FusesPrompt"
            local isMinesAnchorPrompt = prompt.Parent and prompt.Parent.Name == "MinesAnchor" and prompt.Name == "ActivateEventPrompt"
            
            if isMinesGateButton or isFusesPrompt or (not check or check < 1) then
                if isMinesAnchorPrompt then
                    return
                end
                
                local Base
                if prompt.Parent:IsA("BasePart") then
                    Base = prompt.Parent
                elseif prompt.Parent.Parent and prompt.Parent.Parent:IsA("BasePart") then
                    Base = prompt.Parent.Parent
                elseif prompt.Parent and prompt.Parent:FindFirstChildWhichIsA("BasePart") then
                    Base = prompt.Parent:FindFirstChildWhichIsA("BasePart")
                else
                    if prompt.Parent.Parent and prompt.Parent.Parent:FindFirstChildOfClass("BasePart") then
                        Base = prompt.Parent.Parent:FindFirstChildOfClass("BasePart")
                    end
                end
                
                if Base and (LocalPlayer.Character.HumanoidRootPart.Position - Base.Position).Magnitude < prompt.MaxActivationDistance then
                    if not (isMinesGateButton or isFusesPrompt) then
                        local isTrickOrTreat = false
                        if prompt.Name == "ActivateEventPrompt" then
                            local parent = prompt.Parent
                            if parent and parent.Name == "HouseDoor" then
                                local grandParent = parent.Parent
                                if grandParent and (grandParent.Name == "TrickOrTreatHouse" or grandParent.Name == "TrickOrTreatDoor") then
                                    isTrickOrTreat = true
                                end
                            end
                        end
                        if isTrickOrTreat then
                            return
                        end
                        
                        if prompt.Parent and prompt.Parent.Name == "GlitchCube" and Options.IgnoreList.Value["故障方块"] then
                            return
                        end
                        if prompt.Parent and prompt.Parent.Name == "GoldPile" and Options.IgnoreList.Value["金币"] then return end
                        if prompt.Name == "ModulePrompt" and prompt.Parent and prompt.Parent.Name == "Candy" and Options.IgnoreList.Value["糖果"] then
                            return
                        end
                        if prompt.Parent:GetAttribute("JeffShop") and Options.IgnoreList.Value["Jeff物品"] then return end
                        if prompt.Parent.Parent and prompt.Parent.Parent.Name == "Drops" and Options.IgnoreList.Value["丢弃物品"] then return end
                        if prompt.Parent and prompt.Parent.Name == "Candy" and prompt.Parent:GetAttribute("Tool_CandyID") == "CandyRed" and Options.IgnoreList.Value["死亡糖果"] then
                            return
                        end
                        if prompt.Parent and prompt.Parent.Parent and prompt.Parent.Parent.Name == "WGrampyShop" and Options.IgnoreList.Value["Grampy物品"] then
                            return
                        end
                        if prompt.Name == "ModulePrompt" and prompt.Parent and prompt.Parent.Name == "Hole" then return end
                        if prompt.Name == "ModulePrompt" and prompt.Parent and prompt.Parent.Name == "Mandrake" then return end
                        if prompt.Parent and prompt.Parent.Name == "Padlock" then return end
                        if prompt.Parent and prompt.Parent.Name == "KeyObtainFake" then return end
                        if isMinesAnchorPrompt then
                            return
                        end
                    end

                    if prompt.ClickablePrompt then
                        fireInteract(prompt)
                    end
                end
            end
        end
    end
end


if CollisionClone and CollisionClone.Anchored then
CollisionClone.Anchored = false
end
if CollisionClone2 and CollisionClone2.Anchored then
CollisionClone2.Anchored = false
end

end



end))


table.insert(Connections,LocalPlayer:GetAttributeChangedSignal("CurrentRoom"):Connect(function()
    if Toggles.Door and Toggles.Door.Value then
        for _, room in ipairs(workspace.CurrentRooms:GetChildren()) do
            if room:FindFirstChild("Door") and room.Door:FindFirstChild("Door") then
                ESPLibrary:RemoveESP(room.Door.Door)
            end
        end
        
        local currentRoom = LocalPlayer:GetAttribute("CurrentRoom")
        if currentRoom then
            for _, room in ipairs(workspace.CurrentRooms:GetChildren()) do
                local roomNumber = tonumber(room.Name)
                if roomNumber and (roomNumber == currentRoom or roomNumber == currentRoom + 1) then
                    if room:FindFirstChild("Door") and room.Door:FindFirstChild("Door") then
                        local Door = room.Door.Door
                        if not Door:GetAttribute("Used") then
                            local displayText = "门 " .. Door.Parent:GetAttribute("RoomID")
                            
                            if roomNumber == currentRoom then
                                if Door.Parent:FindFirstChild("Lock") then
                                    displayText = "[锁定] " .. displayText
                                end
                            elseif roomNumber == currentRoom + 1 then
                                local keyFound = false
                                for _, obj in ipairs(room:GetDescendants()) do
                                    if obj.Name == "KeyObtain" and not obj:GetAttribute("Used") then
                                        keyFound = true
                                        break
                                    end
                                end
                                if keyFound then
                                    displayText = "[锁定] " .. displayText
                                end
                            end
                            
                            AddESP(Door, displayText, DoorColor)
                        end
                    end
                end
            end
        end
    end
    if Toggles.Stardust and Toggles.Stardust.Value then
    Toggles.Stardust:SetValue(false)
    Toggles.Stardust:SetValue(true)
    end
    if Toggles.Chest and Toggles.Chest.Value then
    Toggles.Chest:SetValue(false)
    Toggles.Chest:SetValue(true)
    end
    if Toggles.Key and Toggles.Key.Value then
        Toggles.Key:SetValue(false)
        Toggles.Key:SetValue(true)
    end
    if Toggles.HidingSpot and Toggles.HidingSpot.Value then
        Toggles.HidingSpot:SetValue(false)
        Toggles.HidingSpot:SetValue(true)
    end
    if Toggles.GateLever and Toggles.GateLever.Value then
        Toggles.GateLever:SetValue(false)
        Toggles.GateLever:SetValue(true)
    end
    if Toggles.Books and Toggles.Books.Value then
        Toggles.Books:SetValue(false)
        Toggles.Books:SetValue(true)
    end
    if Toggles.Breaker and Toggles.Breaker.Value then
        Toggles.Breaker:SetValue(false)
        Toggles.Breaker:SetValue(true)
    end
    if Toggles.Gold and Toggles.Gold.Value then
        Toggles.Gold:SetValue(false)
        Toggles.Gold:SetValue(true)
    end
    if Toggles.TimerLever and Toggles.TimerLever.Value then
        Toggles.TimerLever:SetValue(false)
        Toggles.TimerLever:SetValue(true)
    end

if Toggles.AntiSnare.Value then
for _, room in ipairs(workspace.CurrentRooms:GetChildren()) do
if room:FindFirstChild("Snares") then
for _, v in ipairs(room.Snares:GetChildren()) do
if v.Name == "Snare" then
v:WaitForChild("Hitbox",9e9).CanTouch = false
end
end
end
        
if room:FindFirstChild("Assets") then
for _, v in ipairs(room.Assets:GetChildren()) do
if v.Name == "Snare" then
v:WaitForChild("Hitbox",9e9).CanTouch = false
end
end
end
end
end
if Toggles.AntiDupe.Value then
for _, v in ipairs(workspace.CurrentRooms[LocalPlayer:GetAttribute("CurrentRoom")]:GetChildren()) do



if v and v.Name == "SideroomDupe" then

v:WaitForChild("DoorFake",9e9):WaitForChild("Hidden",9e9).CanTouch = false

end

end

end

for _, v in ipairs(workspace.CurrentRooms[LocalPlayer:GetAttribute("CurrentRoom")]:GetChildren()) do




if v.Name == "SideroomDupe" then


if v:WaitForChild("DoorFake"):FindFirstChild("Lock") then
v:WaitForChild("DoorFake"):FindFirstChild("Lock"):FindFirstChildOfClass("ProximityPrompt").Enabled =  not Toggles.AntiDupe.Value 


end


end

end

if Toggles.AntiGiggle and Toggles.AntiGiggle.Value then
for _, v in ipairs(workspace.CurrentRooms[LocalPlayer:GetAttribute("CurrentRoom")]:GetChildren()) do
if v.Name == "GiggleCeiling" then
v:WaitForChild("Hitbox",9e9).CanTouch = false
end
end
end


if Toggles.AntiVacuum.Value then
for _, v in ipairs(workspace.CurrentRooms:GetChildren()) do
if v.Name == "SideroomSpace" then
v:WaitForChild("Collision").CanTouch = false
v:WaitForChild("Collision").CanCollide = true
end
end
end


if Toggles.Door.Value then
local room = LocalPlayer:GetAttribute("CurrentRoom")

local lastroom = room - 1
local Door = workspace.CurrentRooms[lastroom].Door.Door
if Door then
ESPLibrary:RemoveESP(Door)
end

local Door = workspace.CurrentRooms[LocalPlayer:GetAttribute("CurrentRoom")].Door.Door
if not Door:GetAttribute("Used") then
local displayText = "门 " .. Door.Parent:GetAttribute("RoomID")
local isLocked = Door.Parent:FindFirstChild("Lock") ~= nil
local isOpen = not Door.Anchored

if isOpen then
displayText = "[已打开] " .. displayText
elseif isLocked then
displayText = "[锁定] " .. displayText
end

AddESP(Door, displayText, DoorColor)
end
end

if Toggles.EntityNotifys.Value then
local v = workspace.CurrentRooms[LocalPlayer:GetAttribute("CurrentRoom")]:FindFirstChild("Groundskeeper",true)
if v and Options.EntitiesPicker.Value["Groundskeeper"] then
Library:Notify({
Title = "通知实体",
Description = "Groundskeeper 已生成",
Time = 3,
})
Sound()
end
end

if Toggles.EntitesESP.Value then
local Groundskeeper = workspace.CurrentRooms[LocalPlayer:GetAttribute("CurrentRoom")]:FindFirstChild("Groundskeeper", true)
if Groundskeeper then
addESP(Groundskeeper, "Groundskeeper")
end
end

if Toggles.Ladder and Toggles.Ladder.Value then
local v = workspace.CurrentRooms[LocalPlayer:GetAttribute("CurrentRoom")]:FindFirstChild("Ladder",true)

if v then
AddESP(v,"梯子",Color3.new(0,0,1))
end



end


if Toggles.Key.Value then

local v = workspace.CurrentRooms[game.ReplicatedStorage.GameData.LatestRoom.Value]:FindFirstChild("KeyObtain",true)
if v and not v:GetAttribute("Used") then
AddESP(v,"钥匙",KeyColor)

end
end
if Toggles.GateLever.Value then
local Lever = workspace.CurrentRooms[game.ReplicatedStorage.GameData.LatestRoom.Value]:FindFirstChild("Assets"):FindFirstChild("LeverForGate")
if Lever then 
AddESP(Lever,"门拉杆 ",GateLeverColor)

end
end
if Toggles.EntitesESP.Value then
local Figure = workspace.CurrentRooms:FindFirstChild("FigureRig",true) or workspace.CurrentRooms:FindFirstChild("FigureRagdoll",true)

if Figure then
addESP(Figure,"Figure")

end
end
if Toggles.EntitesESP.Value then
local Entity = workspace.CurrentRooms[LocalPlayer:GetAttribute("CurrentRoom")]:FindFirstChild("LiveEntityBramble",true)
if Entity then
addESP(Entity,"Bramble")


end
end
if Toggles.Generator and Toggles.Generator.Value then
local v = workspace.CurrentRooms[game.ReplicatedStorage.GameData.LatestRoom.Value]:FindFirstChild("GeneratorMain",true)
if v then 
AddESP(v,"发电机",GeneratorColor)

end
end
if Toggles.TimerLever.Value then
local v = workspace.CurrentRooms[game.ReplicatedStorage.GameData.LatestRoom.Value]:FindFirstChild("TimerLever",true)
if v then

AddESP(v,"倒计时拉杆",TimerLeverColor)
end
end
if Toggles.HidingSpot.Value then
if ReplicatedStorage:FindFirstChild("RemotesFolder") then
local room = LocalPlayer:GetAttribute("CurrentRoom")
if room and room > 0 then
local lastroom = room - 1
for _, v in ipairs(workspace.CurrentRooms[lastroom]:GetDescendants()) do
local TextName = HidingSpots[v.Name]
if TextName and v.PrimaryPart then
ESPLibrary:RemoveESP(v)

end
end
end

end




for _, v in ipairs(workspace.CurrentRooms[LocalPlayer:GetAttribute("CurrentRoom")]:FindFirstChild("Assets",true):GetChildren()) do
local TextName = HidingSpots[v.Name]
if TextName and v.PrimaryPart then
AddESP(v,TextName,HidingSpotColor)

end
end

end


end)
)
Toggles.NoCutscenes:OnChanged(function(Value)
local CutScenes = RemoteListener:FindFirstChild("Cutscenes") or RemoteListener:FindFirstChild("_Cutscenes")
CutScenes.Name = Value and "_Cutscenes" or "Cutscenes"
end)

Toggles.EnableJump:OnChanged(function(Value)
if Character then
Character:SetAttribute("CanJump",Value)
end

end)
print("hi0")

 

local InfiniteTable = {
    Chest_Vine = true, CuttableVines = true, Cellar = true,
UnlockPrompt = true, ThingToEnable = true, LockPrompt = true, SkullPrompt = true, FusesPrompt = true,
ChestBoxLocked = true, Locker_Small_Locked = true, Toolbox_Locked = true
}

local ImportantNames = {
    LiveObstructionNew = true,
LiveObstructionNewIntro = true,
    ChandelierObstruction = true,
    Seek_Arm = true,
    
    Egg = true,
    
    LiveHintBook = true,
    LiveBreakerPolePickup = true,
    Lever = true,
    MinesAnchor = true,
    VineGuillotine = true,
 GoldPile = true,
FuseObtain = true,
    Toolbox = true,
    CuttableVines = true, Cellar = true,
UnlockPrompt = true, ThingToEnable = true, LockPrompt = true, SkullPrompt = true, FusesPrompt = true,
Locker_Small_Locked = true, Toolbox_Locked = true,
    Flashlight = true,
    Lockpick = true,
    Vitamins = true,
    Bandage = true,
    StarVial = true,
    StarBottle = true,
    StarJug = true,
    Shakelight = true,
    Straplight = true,
    Bulklight = true,
    Battery = true,
    Candle = true,
    Crucifix = true,
    CrucifixWall = true,
    Glowsticks = true,
    SkeletonKey = true,
    Candy = true,
    ShieldMini = true,
    ShieldBig = true,
    BandagePack = true,
    BatteryPack = true,
    RiftCandle = true,
    LaserPointer = true,
    HolyGrenade = true,
    Shears = true,
    Smoothie = true,
    Cheese = true,
    Bread = true,
    AlarmClock = true,
    RiftSmoothie = true,
    GweenSoda = true,
    GlitchCub = true,
    RiftJar = true,
    Compass = true,
    Lantern = true,
    Multitool = true,
    Lotus = true,
    TipJar = true,
    LotusPetalPickup = true,
    KeyIron = true,
    CandyBag = true,
    Donut = true,
    Toolshed_Small = true,
    Chest_Vine = true,
    ChestBoxLocked = true,
    ChestBox = true,
    StardustPickup = true,
ElevatorBreaker = true,
WaterPump = true,
GrumbleRig = true,
PowerupPad = true,
SeekGuidingLight = true,
DoorNormal = true,
DoorFrame = true,
Luggage_Cart_Crouch = true,
Carpet = true,
Floor = true,
CarpetLight = true,
Luggage_Cart = true,
DropCeiling = true,
End_DoorFrame = true,
SeeThroughGlass = true,
Start_DoorFrame = true,
TriggerEventCollision = true,
DoorLattice = true,
Collision = true
}

 table.insert(Connections,
workspace.DescendantAdded:Connect(function(v)
    local Delay = math.random(200, 270) / 1000
    task.wait(Delay)

    if v:IsA("ProximityPrompt") then
        local isMinesGateButton = v.Parent and v.Parent.Name == "Button" and 
                                 v.Parent.Parent and v.Parent.Parent.Name == "MinesGateButton"
        
        local isFusesPrompt = v.Name == "FusesPrompt"
        
        local isMinesAnchorPrompt = v.Parent and v.Parent.Name == "MinesAnchor" and v.Name == "ActivateEventPrompt"
        
        if Toggles.AutoInteract.Value then
            if v and (not Ignore[v.Name] or isMinesGateButton or isFusesPrompt) then
                if not isMinesAnchorPrompt then
                    if v:IsA("ProximityPrompt") then
                        table.insert(AutoInteractTable, v)
                    end
                end
            end
        end


if Toggles.PromptReach.Value then
v:SetAttribute("Distance",v.MaxActivationDistance)
v.MaxActivationDistance = v.MaxActivationDistance * promptReachMultiplier
end

if Toggles.PromptClip.Value then


v.RequiresLineOfSight = false 

end

if Toggles.InstantPrompt.Value then


v:SetAttribute("Hold",v.HoldDuration)

v.HoldDuration =  0

end


end
if Toggles.AntiLag.Value then
if v:IsA("BasePart") then
v.Material = Enum.Material.Plastic
end
if v.Name == "LightFixture" or v.Name == "Carpet" or v.Name == "CarpetLight" then
v:Destroy()
end
if v:IsA("Texture") then
v:Destroy()
end








end

if not ImportantNames[v.Name] then return end


if Toggles.AutoDoors and Toggles.AutoDoors.Value then

if  Objects[v.Name] then 
canhit(v)
end
if v.Name == "LiveObstructionNew" or v.Name == "LiveObstructionNewIntro"  then
canhit(v:WaitForChild("Collision"))
end
if not v:IsA("Part") and v.Name == "SeeThroughGlass" then

canhit(
v
)

end
if v.Name == "Collision" and v.Parent and v.Parent.Name == "Parts" then
v.CanCollide = false 

end
if v.Name == "DoorLattice" then
canhit(v:WaitForChild("Door",9e9))
end




end








if Toggles.AutoBreakerBox.Value then
if v.Name == "ElevatorBreaker" then 
Breaker = v
end
end
if Toggles.WaterPump and Toggles.WaterPump.Value then

if v.Name == "WaterPump" then
AddESP(v,"水泵",Color3.new(0,1,0))
end

end








if Toggles.InfiniteSItems and Toggles.InfiniteSItems.Value then

if ShearsParents[v.Name] or ShearsNames[v.Name] then
if v:IsA("ProximityPrompt") then
table.insert(InfSStore,v)
else
table.insert(InfSStore,v:FindFirstChildOfClass("ProximityPrompt"))
end
end
end

if Toggles.InfiniteItems and Toggles.InfiniteItems.Value then

if LockpickNames[v.Name] or LockpickParents[v.Name] then
if v:IsA("ProximityPrompt") then
table.insert(InfStore,v)
else
table.insert(InfStore,v:FindFirstChildOfClass("ProximityPrompt"))
end
end
end


if Toggles.ShowSeekPath and Toggles.ShowSeekPath.Value then

showpath(v)

end

if Toggles.AntiSeekObstructions.Value then
if v.Name == "ChandelierObstruction" or v.Name == "Seek_Arm" then
for _, part in ipairs(v:GetChildren()) do
if part:IsA("BasePart") then part.CanTouch = false
end
end
end

end



if Toggles.Books.Value then
if v.Name == "LiveHintBook" then
AddESP(v,"书",BooksColor)
end
end

if Toggles.Breaker.Value then
if v.Name == "LiveBreakerPolePickup" then
AddESP(v,"断路器",BreakerColor)
end
end







if Toggles.AntiGloomPile and Toggles.AntiGloomPile.Value then
if v.Name == "Egg" then v.CanTouch = false


end


end





if Toggles.Anchor and Toggles.Anchor.Value then
if v.Name == "MinesAnchor" then
AddESP(v,"锚 " ..  v:WaitForChild("Sign").TextLabel.Text,AnchorColor)
end
end

if Toggles.Items.Value then
local name = Item[v.Name]
if name then
AddESP(v,name,ItemsColor)

end


end
if Toggles.Fuse and Toggles.Fuse.Value then



if v.Name == "FuseObtain" then


AddESP(v,"保险丝",FuseColor)
end
end


if v.Name == "GrumbleRig" then
addESP(v,"Grumble")
end



if Toggles.Gold.Value then
if v.Name == "GoldPile" then
AddESP(v,"金币 " .. v:GetAttribute("GoldValue"),GoldColor)
end

end

if (Floor.Value == "Garden") and Toggles.LeverESP.Value then

if v and v.Parent and v.Parent.Name == "VineGuillotine" and v.Name == "Lever" then

AddESP(v,"户外拉杆",Color3.new(0,1,0))


end


end
if Toggles.AutoGetPowerUps and Toggles.AutoGetPowerUps.Value and  v.Name == "PowerupPad" then
v:WaitForChild("Hitbox",9e9).Size = Vector3.new(90, 90, 90)

end

end))

local old
print("Hi1")



if  not Disable5 then

old = hookmetamethod(game,"__namecall",newcclosure(function(self, ...)
local args = { ... }
local method = getnamecallmethod()

if self.Name == "ClutchHeartbeat" and method == "FireServer" and Toggles.AutoHeartbeatMiniGame.Value then
args[1] = true
return old(self,unpack(args()))

end

return old(self, ...)



end))
end






print("hi2")





function Unload()
if noVignetteLoop then
noVignetteLoop:Disconnect()
noVignetteLoop = nil
end
if noOxygenVignetteLoop then
noOxygenVignetteLoop:Disconnect()
noOxygenVignetteLoop = nil
end
if WatermarkConnection then
WatermarkConnection:Disconnect()
WatermarkConnection = nil
end
if minecartConnection then
minecartConnection:Disconnect()
minecartConnection = nil
end
if ESPLibrary and ESPLibrary.GlobalConfig then
ESPLibrary.GlobalConfig.Rainbow = false
end
if AutoDoorsConnection then
AutoDoorsConnection:Disconnect()
AutoDoorsConnection = nil
end
LocalPlayer.Character.Head.PointLight.Brightness = 1
LocalPlayer.Character.Humanoid:MoveTo(LocalPlayer.Character.HumanoidRootPart.Position)

if workspace:FindFirstChild("Path Node") then

workspace:FindFirstChild("Path Node"):Destroy()



end

LocalPlayer:SetAttribute("StarringLoaded",false)
Library.Unloaded = true
for i, Toggle in ipairs(Toggles) do
Toggle:SetValue(false)
end
for _, connection in pairs(jumpPowerConnections) do
if connection then
connection:Disconnect()
end
end
    jumpPowerConnections = {}
for _, Connection in ipairs(Connections) do
Connection:Disconnect()
end

Library:Unload()
ESPLibrary:Unload()


if Character.HumanoidRootPart:FindFirstChild("FlyBodyVelocity") then

Character.HumanoidRootPart:FindFirstChild("FlyBodyVelocity"):Destroy()
end
if Character.HumanoidRootPart:FindFirstChild("FlyBodyGyro") then
Character.HumanoidRootPart:FindFirstChild("FlyBodyGyro"):Destroy()
end
if RemoteFolder:FindFirstChild("Crouch") then


RemoteFolder.Crouch:FireServer(false)

end

Character.Humanoid.PlatformStand = false 
Character:SetAttribute("CanJump",false)
if FakeSurge then
FakeSurge:Destroy()
end
if ReplicatedStorage:FindFirstChild("SurgeRemote") then
ReplicatedStorage.SurgeRemote.Parent = ReplicatedStorage.RemotesFolder
end
if ClientModules.EntityModules:FindFirstChild("_Shade") then
ClientModules.EntityModules:FindFirstChild("_Shade").Name = "Shade"
end
for _, prompt in ipairs(workspace.CurrentRooms:GetDescendants()) do
if prompt:IsA("ProximityPrompt") then

prompt.MaxActivationDistance = 7
prompt.HoldDuration = prompt:GetAttribute("Hold") or 7
end
end
Lighting.GlobalShadows = true
Lighting.Brightness = 0
for _, v in ipairs(workspace:GetDescendants()) do
if v:GetAttribute("HasFake") then v:SetAttribute("HasFake",nil)
end
if v:GetAttribute("Used") then
v:SetAttribute("Used",nil)
end
end

if roomConn then
roomConn:Disconnect()
roomConn = nil
end

if AutoRoomsConnection
then
AutoRoomsConnection:Disconnect()
AutoRoomsConnection = nil
end


if conn then
conn:Disconnect()
conn = nil
end
if JumpConnection then
JumpConnection:Disconnect()
JumpConnection = nil
end
if renderConn then
renderConn:Disconnect()
renderConn = nil
end
if AutoAnticheat then 
AutoAnticheat:Disconnect()
AutoAnticheat = nil
end

if con then
con:Disconnect()
con = nil
end
if Toggles.Godmode and Toggles.Godmode.Value then

LocalPlayer.Character.Collision.Position = LocalPlayer.Character.Collision.Position + Vector3.new(0, 11, 0)


end



if NewCharacter then
NewCharacter:Disconnect()
NewCharacter = nil
end



for _, v in ipairs(workspace.CurrentRooms:GetDescendants()) do


if v:FindFirstChild("HidePrompt") then

for _, base in ipairs(v:GetChildren()) do


if base:IsA("BasePart") and not (base.Name == "PlayerCollision" or base.Name == "Collision") then 


base.Transparency = 0

end


end



end



end

if oxygenNotifyConnection then
    oxygenNotifyConnection:Disconnect()
    oxygenNotifyConnection = nil
end

if oxygenHideTimer then
    oxygenHideTimer:Cancel()
    oxygenHideTimer = nil
end

if oxygenNotifyUI then
    oxygenNotifyUI:Destroy()
    oxygenNotifyUI = nil
end

oxygenNotifyRunning = false


if Toggles.HasteClock and Toggles.HasteClock.Value then
    Toggles.HasteClock:SetValue(false)
end
    
if hasteClockConnection then
    hasteClockConnection:Disconnect()
    hasteClockConnection = nil
end
    
if hasteClockRoomConnection then
    hasteClockRoomConnection:Disconnect()
    hasteClockRoomConnection = nil
end
    
if hasteClockUI then
    hasteClockUI:Destroy()
    hasteClockUI = nil
end


if NoclipConnection then
NoclipConnection:Disconnect()
NoclipConnection = nil
end
if FixingConnection then 
FixingConnection:Disconnect()
FixingConnection = nil
end
if Character:FindFirstChild("_CollisionPart") then
Character:FindFirstChild("_CollisionPart"):Destroy()
end
if Character:FindFirstChild("_CollisionPart2") then
Character:FindFirstChild("_CollisionPart2"):Destroy()
end
if SeekPath then
SeekPath:Disconnect()
SeekPath = nil
end
if AddChild then
AddChild:Disconnect()
AddChild = nil
end

for _, v in ipairs(workspace.CurrentRooms:GetDescendants()) do
if v.Name == "Snare" and v.Parent and v.Parent.Name ~= "Snare" then
v:WaitForChild("Hitbox").CanTouch = false
end

end
if AutoLibraryCodeConnection then
AutoLibraryCodeConnection:Disconnect()
AutoLibraryCodeConnection = nil
end
    
if autoGlitchConnection then
autoGlitchConnection:Disconnect()
autoGlitchConnection = nil
end
autoGlitchEnabled = false
    
if Toggles.AutoGlitch and Toggles.AutoGlitch.Value then
Toggles.AutoGlitch:SetValue(false)
end

if InfiniteCrucifixConnection then
InfiniteCrucifixConnection:Disconnect()
InfiniteCrucifixConnection = nil
end

if ConInf then
ConInf:Disconnect()
ConInf = nil 
end
if PlayersConnection then
PlayersConnection:Disconnect()
PlayersConnection = nil
end

if RankedAntiBananaConnection then

RankedAntiBananaConnection:Disconnect()


RankedAntiBananaConnection = nil
end


end


CleanUp = LocalPlayer.Character.ChildAdded:Connect(function(v)

if v.Name == "Key" and ReplicatedStorage:FindFirstChild("RemotesFolder") then 

cleanupEnableReal()


end
if v.Name == "Lockpick" then

if Toggles.InfiniteItems and Toggles.InfiniteItems.Value then

scanPrompts(LockpickParents, LockpickNames)


end


if Toggles.InfiniteSItems and Toggles.InfiniteSItems.Value then

scanPrompts(ShearsParents, ShearsNames)

end




end



end)

if AnticheatManipulationLoop then
task.cancel(AnticheatManipulationLoop)
AnticheatManipulationLoop = nil
end

AnticheatManipulationEnabled = false

if alive and AnticheatManipulationOrigin then
Character:PivotTo(CFrame.new(AnticheatManipulationOrigin))
end
    
AnticheatManipulationOrigin = nil
end

LocalPlayer.CharacterAdded:Connect(function()

if CleanUp then
CleanUp:Disconnect()
CleanUp = nil
end


CleanUp = LocalPlayer.Character.ChildAdded:Connect(function(v)

if v.Name == "Key" then

cleanupEnableReal()


end
if v.Name == "Lockpick" then

if Toggles.InfiniteItems and Toggles.InfiniteItems.Value then

scanPrompts(LockpickParents, LockpickNames)


end


if Toggles.InfiniteSItems and Toggles.InfiniteSItems.Value then

scanPrompts(ShearsParents, ShearsNames)

end
end


end)


end)

SettingsBox:AddLabel("菜单"):AddKeyPicker("MenuKeybind", { Default = "RightShift", NoUI = true, Text = "快捷菜单" })

Library.ToggleKeybind = Options.MenuKeybind 
SettingsBox:AddToggle("ShowKeybinds", {
Text = "显示快捷键",
Default = false,
Tooltip = "显示快捷键菜单",
}):OnChanged(function()
Library.KeybindFrame.Visible = Toggles.ShowKeybinds.Value
end)

SettingsBox:AddToggle("ShowCustomCursor", {
Text = "显示自定义光标",
Default = Library.IsMobile == true and true or false,
Tooltip = "切换光标的可见性",
}):OnChanged(function()
Library.ShowCustomCursor = Toggles.ShowCustomCursor.Value
end)

SettingsBox:AddDropdown("DPIDropdown", {
    Values = { "50%", "75%", "100%", "125%", "150%", "175%", "200%" },
    Default = "100%",
    Text = "DPI缩放",
Callback = function(Value)
Value = Value:gsub("%%", "")
local DPI = tonumber(Value)
Library:SetDPIScale(DPI)
end,
})

SettingsBox:AddButton({
     Text = "卸载脚本",
     Func = function()
Unload()
end
})

local hubFolder = "Starring"
local addonFolder = hubFolder.."/Addons"

if not isfolder(hubFolder) then
makefolder(hubFolder)
end

if not isfolder(addonFolder) then
makefolder(addonFolder)
end

Starring = Starring or {}
Starring.Addons = {}

for _, file in ipairs(listfiles(addonFolder)) do
if file:sub(-4) == ".lua" or file:sub(-4) == ".txt" then
local success, addon = pcall(function()
return loadstring(readfile(file))()
end)
if success and type(addon) == "table" then
table.insert(Starring.Addons, addon)

AddonBox:AddToggle(addon.Text, {
Text = addon.Text,
Default = addon.Default,
Callback = addon.Callback
})
end

end
end


local folder_path = "Starring"
local file_path = "Doors"
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({ 'MenuKeybind' })

ThemeManager:SetFolder(folder_path)
SaveManager:SetFolder(folder_path .. '/' .. file_path)


SaveManager:BuildConfigSection(Tabs['UISettings'])
ThemeManager:ApplyToTab(Tabs['UISettings'])

SaveManager:GetAutoloadConfig()
SaveManager:LoadAutoloadConfig()
SaveManager:SaveAutoloadConfig(file_path)
end
